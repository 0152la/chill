@unnumberedsubsec Copy_to_registers
@deftypefn {Transform} {} copy_to_registers (string @var{start_loop}, string @var{array_name}) 

The @code{copy_to_registers} command copies the vector @var{array_name} to an intermediate register to speed up access to frequently used small arrays. @var{start_loop} specifies the loop in which the intermediate register access should be placed.

@end deftypefn

@multitable @columnfractions .50 .50 
@item
@b{Python Script}
@smallformat
@cartouche
@verbatim
read_IR( "mpeg4_cpu")

N=4096
M=4096
W=16

Ti=32
Tj=32
Tii=16
Tjj=16
Tk=4

tile_by_index(["i","j"],[Ti,Tj],{'l1_control':"ii",'l2_control':"jj"},["ii","jj","i","j","k","l"], None)
tile_by_index(["i","j"],[Tii,Tjj],{'l1_control':"iii",'l2_control':"jjj"},["ii","jj","iii","i","jjj","j","k","l"],None)

cudaize(0, "kernel_GPU",{'curr':W*W,'prev':(N+W)*(M+W),'result':N*M}, ["ii","jj"], ["i","j"], [])

copy_to_registers("jjj","result")


@end verbatim
@end cartouche
@end smallformat
@tab @b{Original code}
@smallformat
@cartouche
@verbatim
#define N1 4096
#define N2 4096
#define WINDOW_SIZE 16

void mpeg4_cpu(float result[N1][N2], float prev[N2+WINDOW_SIZE][N2+WINDOW_SIZE], float  curr[WINDOW_SIZE*WINDOW_SIZE])
{
	unsigned int i;
	unsigned int j;
	unsigned int k;
	unsigned int l;

	for ( i = 0; i < N1; ++i)    
		for ( j = 0; j < N2; ++j) 
                       for ( k = 0; k < WINDOW_SIZE; ++k) 
				for ( l = 0; l < WINDOW_SIZE; ++l) 
					result[i][j] += prev[i+k][j+l] * curr[k*WINDOW_SIZE+l];
				
			

		
	
}

@end verbatim
@end cartouche
@end smallformat
@end multitable

@multitable @columnfractions .50 .50
@item
@b{Output on stdout}
@smallformat
@cartouche
@verbatim

curOrder: ii,jj,iii,i,jjj,j,k,l
idxNames: ii,jj,iii,i,jjj,j,k,l
ii,jj
thread= i,j

ii,jj,iii,i,jjj,j,k,l
// ~cuda~ preferredIdx: ii
for(t2 = 0; t2 <= 127; t2++) {
  // ~cuda~ preferredIdx: jj
  for(t4 = 0; t4 <= 127; t4++) {
    // ~cuda~ preferredIdx: iii
    for(t6 = 0; t6 <= 1; t6++) {
      // ~cuda~ preferredIdx: i
      for(t8 = 32*t2+16*t6; t8 <= 32*t2+16*t6+15; t8++) {
        // ~cuda~ preferredIdx: jjj
        for(t10 = 0; t10 <= 1; t10++) {
          // ~cuda~ preferredIdx: j
          for(t12 = 32*t4+16*t10; t12 <= 32*t4+16*t10+15; t12++) {
            // ~cuda~ preferredIdx: k
            for(t14 = 0; t14 <= 15; t14++) {
              // ~cuda~ preferredIdx: l
              for(t16 = 0; t16 <= 15; t16++) {
                s0(t2,t4,t6,t8,t12,t14,t16);
              }
            }
          }
        }
      }
    }
  }
}



@end verbatim
@end cartouche
@end smallformat
@end multitable
