4748float prev[4096 + 16][4096 + 16]2float result[4096][4096]Traceback (most recent call last):
  File "mpeg4.py", line 36, in <module>
    unroll_to_depth(2)
  File "cudaize.py", line 891, in unroll_to_depth
    guard_idx = thread_idxs[-1]  # last one
SystemError: ../Objects/listobject.c:169: bad argument to internal function
void mpeg4_cpu(float result[4096][4096], float prev[4096 + 16][4096 + 16], float curr[16 * 16]) {
  float _P2[2];
  __shared__ float _P1[47][48];
  unsigned int i;
  unsigned int j;
  unsigned int k;
  unsigned int l;
  for (i = (unsigned int)0; i < (unsigned int)4096; ++i) 
    for (j = (unsigned int)0; j < (unsigned int)4096; ++j) 
      for (k = (unsigned int)0; k < (unsigned int)16; ++k) 
        for (l = (unsigned int)0; l < (unsigned int)16; ++l) 
          _P2[(chill_t132 - (32 * chill_t126 + chill_t131)) / 16] += _P1[chill_t132 + chill_t134 - 32 * chill_t126][chill_t129 + chill_t133 - 32 * chill_t125] * curr[chill_t133 * (unsigned int)16 + chill_t134];
}// this source is derived from CHILL AST originally from file 'mpeg4.c' as parsed by frontend compiler rose

#define N1 4096

#define N2 4096

#define WINDOW_SIZE 16

void mpeg4_cpu(float result[4096][4096], float prev[4096 + 16][4096 + 16], float curr[16 * 16]) {
}
void mpeg4_cpu(float result[4096][4096], float prev[4096 + 16][4096 + 16], float curr[16 * 16]) {
}_P2[(chill_t132 - (32 * chill_t126 + chill_t131)) / 16] += _P1[chill_t132 + chill_t134 - 32 * chill_t126][chill_t129 + chill_t133 - 32 * chill_t125] * curr[chill_t133 * (unsigned int)16 + chill_t134]_P1[chill_t124 - 32 * chill_t118][chill_t122 - 32 * chill_t117] = prev[chill_t122][chill_t124]_P2[(chill_t136 - (32 * chill_t126 + chill_t131)) / 16] = result[32 * chill_t125 + 16 * chill_t127 + chill_t128][chill_t136]result[32 * chill_t125 + 16 * chill_t127 + chill_t128][chill_t136] = _P2[(chill_t136 - (32 * chill_t126 + chill_t131)) / 16]// ~cuda~ blockLoop preferredIdx: bx
for (t2 = 0; t2 <= 127; t2 += 1) 
  // ~cuda~ preferredIdx: by
  for (t4 = 0; t4 <= 127; t4 += 1) {
    // ~cuda~ preferredIdx: tx
    for (t6 = 0; t6 <= 46; t6 += 1) 
      // ~cuda~ preferredIdx: ty
      for (t8 = 0; t8 <= 46; t8 += 1) 
        _P1[32 * t4 + t6 - 32 * t4][32 * t2 + t8 - 32 * t2] = prev[32 * t2 + t8][32 * t4 + t6];
    // ~cuda~ preferredIdx: iii sync
    for (t6 = 0; t6 <= 1; t6 += 1) 
      // ~cuda~ threadLoop preferredIdx: tx
      for (t8 = 0; t8 <= 15; t8 += 1) {
        // ~cuda~ preferredIdx: k
        for (t12 = 0; t12 <= 15; t12 += 1) 
          // ~cuda~ preferredIdx: l
          for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
            _P2[(t14 - (32 * t4 + t12)) / 16] = result[32 * t2 + 16 * t6 + t8][t14];
        // ~cuda~ preferredIdx: jjj
        for (t12 = 0; t12 <= 1; t12 += 1) 
          // ~cuda~ preferredIdx: ty
          for (t14 = 0; t14 <= 15; t14 += 1) 
            // ~cuda~ preferredIdx: k
            for (t18 = 0; t18 <= 15; t18 += 1) 
              // ~cuda~ preferredIdx: l
              for (t20 = 0; t20 <= 15; t20 += 1) 
                _P2[(32 * t4 + 16 * t12 + t14 - (32 * t4 + t14)) / 16] += _P1[32 * t4 + 16 * t12 + t14 + t20 - 32 * t4][32 * t2 + 16 * t6 + t8 + t18 - 32 * t2] * curr[t18 * (unsigned int)16 + t20];
        // ~cuda~ preferredIdx: k
        for (t12 = 0; t12 <= 15; t12 += 1) 
          // ~cuda~ preferredIdx: l
          for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
            result[32 * t2 + 16 * t6 + t8][t14] = _P2[(t14 - (32 * t4 + t12)) / 16];
      }
  }_P1[32 * t4 + t6 - 32 * t4][32 * t2 + t8 - 32 * t2]prev[32 * t2 + t8][32 * t4 + t6]_P2[(t14 - (32 * t4 + t12)) / 16]result[32 * t2 + 16 * t6 + t8][t14]_P2[(32 * t4 + 16 * t12 + t14 - (32 * t4 + t14)) / 16]_P1[32 * t4 + 16 * t12 + t14 + t20 - 32 * t4][32 * t2 + 16 * t6 + t8 + t18 - 32 * t2]curr[t18 * (unsigned int)16 + t20]result[32 * t2 + 16 * t6 + t8][t14]_P2[(t14 - (32 * t4 + t12)) / 16]void mpeg4_cpu(float result[4096][4096], float prev[4096 + 16][4096 + 16], float curr[16 * 16]) {
}{
}float prev[4096 + 16][4096 + 16]float prev[4096 + 16][4096 + 16]float *prev[4096 + 16]prev[32 * t2 + t8][32 * t4 + t6]void mpeg4_cpu(float result[4096][4096], float prev[4096 + 16][4096 + 16], float curr[16 * 16]) {
}{
}float result[4096][4096]float result[4096][4096]float *result[4096]result[32 * t2 + 16 * t6 + t8][t14]void mpeg4_cpu(float result[4096][4096], float prev[4096 + 16][4096 + 16], float curr[16 * 16]) {
}{
}float curr[16 * 16]float curr[16 * 16]float *currcurr[t18 * (unsigned int)16 + t20]void mpeg4_cpu(float result[4096][4096], float prev[4096 + 16][4096 + 16], float curr[16 * 16]) {
}{
}float result[4096][4096]float result[4096][4096]float *result[4096]float prev[4096 + 16][4096 + 16]16908544 * sizeof(float)float result[4096][4096]16777216 * sizeof(float)float curr[16 * 16]256 * sizeof(float)16908544 * sizeof(float)16908544 * sizeof(float)cudaMemcpy(devI1Ptr, prev, 16908544 * sizeof(float), cudaMemcpyHostToDevice)16777216 * sizeof(float)16777216 * sizeof(float)cudaMemcpy(devI2Ptr, result, 16777216 * sizeof(float), cudaMemcpyHostToDevice)256 * sizeof(float)256 * sizeof(float)cudaMemcpy(devI3Ptr, curr, 256 * sizeof(float), cudaMemcpyHostToDevice)128128dim3 dimBlock0= dim3(16, 16)float prev[4096 + 16][4096 + 16]float result[4096][4096]kernel_GPU<<<dimGrid0,dimBlock0>>>((float (*)[4112])float * devI1Ptr, (float (*)[4096])float * devI2Ptr, devI3Ptr)// ~cuda~ blockLoop preferredIdx: bx
for (t2 = 0; t2 <= 127; t2 += 1) 
  // ~cuda~ preferredIdx: by
  for (t4 = 0; t4 <= 127; t4 += 1) {
    // ~cuda~ preferredIdx: tx
    for (t6 = 0; t6 <= 46; t6 += 1) 
      // ~cuda~ preferredIdx: ty
      for (t8 = 0; t8 <= 46; t8 += 1) 
        _P1[32 * t4 + t6 - 32 * t4][32 * t2 + t8 - 32 * t2] = prev[32 * t2 + t8][32 * t4 + t6];
    // ~cuda~ preferredIdx: iii sync
    for (t6 = 0; t6 <= 1; t6 += 1) 
      // ~cuda~ threadLoop preferredIdx: tx
      for (t8 = 0; t8 <= 15; t8 += 1) {
        // ~cuda~ preferredIdx: k
        for (t12 = 0; t12 <= 15; t12 += 1) 
          // ~cuda~ preferredIdx: l
          for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
            _P2[(t14 - (32 * t4 + t12)) / 16] = result[32 * t2 + 16 * t6 + t8][t14];
        // ~cuda~ preferredIdx: jjj
        for (t12 = 0; t12 <= 1; t12 += 1) 
          // ~cuda~ preferredIdx: ty
          for (t14 = 0; t14 <= 15; t14 += 1) 
            // ~cuda~ preferredIdx: k
            for (t18 = 0; t18 <= 15; t18 += 1) 
              // ~cuda~ preferredIdx: l
              for (t20 = 0; t20 <= 15; t20 += 1) 
                _P2[(32 * t4 + 16 * t12 + t14 - (32 * t4 + t14)) / 16] += _P1[32 * t4 + 16 * t12 + t14 + t20 - 32 * t4][32 * t2 + 16 * t6 + t8 + t18 - 32 * t2] * curr[t18 * (unsigned int)16 + t20];
        // ~cuda~ preferredIdx: k
        for (t12 = 0; t12 <= 15; t12 += 1) 
          // ~cuda~ preferredIdx: l
          for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
            result[32 * t2 + 16 * t6 + t8][t14] = _P2[(t14 - (32 * t4 + t12)) / 16];
      }
  }__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  // ~cuda~ blockLoop preferredIdx: bx
  for (t2 = 0; t2 <= 127; t2 += 1) 
    // ~cuda~ preferredIdx: by
    for (t4 = 0; t4 <= 127; t4 += 1) {
      // ~cuda~ preferredIdx: tx
      for (t6 = 0; t6 <= 46; t6 += 1) 
        // ~cuda~ preferredIdx: ty
        for (t8 = 0; t8 <= 46; t8 += 1) 
          _P1[32 * t4 + t6 - 32 * t4][32 * t2 + t8 - 32 * t2] = prev[32 * t2 + t8][32 * t4 + t6];
      // ~cuda~ preferredIdx: iii sync
      for (t6 = 0; t6 <= 1; t6 += 1) 
        // ~cuda~ threadLoop preferredIdx: tx
        for (t8 = 0; t8 <= 15; t8 += 1) {
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
              _P2[(t14 - (32 * t4 + t12)) / 16] = result[32 * t2 + 16 * t6 + t8][t14];
          // ~cuda~ preferredIdx: jjj
          for (t12 = 0; t12 <= 1; t12 += 1) 
            // ~cuda~ preferredIdx: ty
            for (t14 = 0; t14 <= 15; t14 += 1) 
              // ~cuda~ preferredIdx: k
              for (t18 = 0; t18 <= 15; t18 += 1) 
                // ~cuda~ preferredIdx: l
                for (t20 = 0; t20 <= 15; t20 += 1) 
                  _P2[(32 * t4 + 16 * t12 + t14 - (32 * t4 + t14)) / 16] += _P1[32 * t4 + 16 * t12 + t14 + t20 - 32 * t4][32 * t2 + 16 * t6 + t8 + t18 - 32 * t2] * curr[t18 * (unsigned int)16 + t20];
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
              result[32 * t2 + 16 * t6 + t8][t14] = _P2[(t14 - (32 * t4 + t12)) / 16];
        }
    }
}// ~cuda~ blockLoop preferredIdx: bx
for (t2 = 0; t2 <= 127; t2 += 1) 
  // ~cuda~ preferredIdx: by
  for (t4 = 0; t4 <= 127; t4 += 1) {
    // ~cuda~ preferredIdx: tx
    for (t6 = 0; t6 <= 46; t6 += 1) 
      // ~cuda~ preferredIdx: ty
      for (t8 = 0; t8 <= 46; t8 += 1) 
        _P1[32 * t4 + t6 - 32 * t4][32 * t2 + t8 - 32 * t2] = prev[32 * t2 + t8][32 * t4 + t6];
    // ~cuda~ preferredIdx: iii sync
    for (t6 = 0; t6 <= 1; t6 += 1) 
      // ~cuda~ threadLoop preferredIdx: tx
      for (t8 = 0; t8 <= 15; t8 += 1) {
        // ~cuda~ preferredIdx: k
        for (t12 = 0; t12 <= 15; t12 += 1) 
          // ~cuda~ preferredIdx: l
          for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
            _P2[(t14 - (32 * t4 + t12)) / 16] = result[32 * t2 + 16 * t6 + t8][t14];
        // ~cuda~ preferredIdx: jjj
        for (t12 = 0; t12 <= 1; t12 += 1) 
          // ~cuda~ preferredIdx: ty
          for (t14 = 0; t14 <= 15; t14 += 1) 
            // ~cuda~ preferredIdx: k
            for (t18 = 0; t18 <= 15; t18 += 1) 
              // ~cuda~ preferredIdx: l
              for (t20 = 0; t20 <= 15; t20 += 1) 
                _P2[(32 * t4 + 16 * t12 + t14 - (32 * t4 + t14)) / 16] += _P1[32 * t4 + 16 * t12 + t14 + t20 - 32 * t4][32 * t2 + 16 * t6 + t8 + t18 - 32 * t2] * curr[t18 * (unsigned int)16 + t20];
        // ~cuda~ preferredIdx: k
        for (t12 = 0; t12 <= 15; t12 += 1) 
          // ~cuda~ preferredIdx: l
          for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
            result[32 * t2 + 16 * t6 + t8][t14] = _P2[(t14 - (32 * t4 + t12)) / 16];
      }
  }__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  // ~cuda~ blockLoop preferredIdx: bx
  for (t2 = 0; t2 <= 127; t2 += 1) 
    // ~cuda~ preferredIdx: by
    for (t4 = 0; t4 <= 127; t4 += 1) {
      // ~cuda~ preferredIdx: tx
      for (t6 = 0; t6 <= 46; t6 += 1) 
        // ~cuda~ preferredIdx: ty
        for (t8 = 0; t8 <= 46; t8 += 1) 
          _P1[32 * t4 + t6 - 32 * t4][32 * t2 + t8 - 32 * t2] = prev[32 * t2 + t8][32 * t4 + t6];
      // ~cuda~ preferredIdx: iii sync
      for (t6 = 0; t6 <= 1; t6 += 1) 
        // ~cuda~ threadLoop preferredIdx: tx
        for (t8 = 0; t8 <= 15; t8 += 1) {
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
              _P2[(t14 - (32 * t4 + t12)) / 16] = result[32 * t2 + 16 * t6 + t8][t14];
          // ~cuda~ preferredIdx: jjj
          for (t12 = 0; t12 <= 1; t12 += 1) 
            // ~cuda~ preferredIdx: ty
            for (t14 = 0; t14 <= 15; t14 += 1) 
              // ~cuda~ preferredIdx: k
              for (t18 = 0; t18 <= 15; t18 += 1) 
                // ~cuda~ preferredIdx: l
                for (t20 = 0; t20 <= 15; t20 += 1) 
                  _P2[(32 * t4 + 16 * t12 + t14 - (32 * t4 + t14)) / 16] += _P1[32 * t4 + 16 * t12 + t14 + t20 - 32 * t4][32 * t2 + 16 * t6 + t8 + t18 - 32 * t2] * curr[t18 * (unsigned int)16 + t20];
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
              result[32 * t2 + 16 * t6 + t8][t14] = _P2[(t14 - (32 * t4 + t12)) / 16];
        }
    }
}t2 = 0t2 <= 127t2 += 1bx = 0bx <= 127bx += 1// ~cuda~ blockLoop preferredIdx: bx
for (bx = 0; bx <= 127; bx += 1) 
  // ~cuda~ preferredIdx: by
  for (t4 = 0; t4 <= 127; t4 += 1) {
    // ~cuda~ preferredIdx: tx
    for (t6 = 0; t6 <= 46; t6 += 1) 
      // ~cuda~ preferredIdx: ty
      for (t8 = 0; t8 <= 46; t8 += 1) 
        _P1[32 * t4 + t6 - 32 * t4][32 * bx + t8 - 32 * bx] = prev[32 * bx + t8][32 * t4 + t6];
    // ~cuda~ preferredIdx: iii sync
    for (t6 = 0; t6 <= 1; t6 += 1) 
      // ~cuda~ threadLoop preferredIdx: tx
      for (t8 = 0; t8 <= 15; t8 += 1) {
        // ~cuda~ preferredIdx: k
        for (t12 = 0; t12 <= 15; t12 += 1) 
          // ~cuda~ preferredIdx: l
          for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
            _P2[(t14 - (32 * t4 + t12)) / 16] = result[32 * bx + 16 * t6 + t8][t14];
        // ~cuda~ preferredIdx: jjj
        for (t12 = 0; t12 <= 1; t12 += 1) 
          // ~cuda~ preferredIdx: ty
          for (t14 = 0; t14 <= 15; t14 += 1) 
            // ~cuda~ preferredIdx: k
            for (t18 = 0; t18 <= 15; t18 += 1) 
              // ~cuda~ preferredIdx: l
              for (t20 = 0; t20 <= 15; t20 += 1) 
                _P2[(32 * t4 + 16 * t12 + t14 - (32 * t4 + t14)) / 16] += _P1[32 * t4 + 16 * t12 + t14 + t20 - 32 * t4][32 * bx + 16 * t6 + t8 + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
        // ~cuda~ preferredIdx: k
        for (t12 = 0; t12 <= 15; t12 += 1) 
          // ~cuda~ preferredIdx: l
          for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
            result[32 * bx + 16 * t6 + t8][t14] = _P2[(t14 - (32 * t4 + t12)) / 16];
      }
  }__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int bx;
  for (bx = 0; bx <= 127; bx += 1) 
    // ~cuda~ preferredIdx: by
    for (t4 = 0; t4 <= 127; t4 += 1) {
      // ~cuda~ preferredIdx: tx
      for (t6 = 0; t6 <= 46; t6 += 1) 
        // ~cuda~ preferredIdx: ty
        for (t8 = 0; t8 <= 46; t8 += 1) 
          _P1[32 * t4 + t6 - 32 * t4][32 * bx + t8 - 32 * bx] = prev[32 * bx + t8][32 * t4 + t6];
      // ~cuda~ preferredIdx: iii sync
      for (t6 = 0; t6 <= 1; t6 += 1) 
        // ~cuda~ threadLoop preferredIdx: tx
        for (t8 = 0; t8 <= 15; t8 += 1) {
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
              _P2[(t14 - (32 * t4 + t12)) / 16] = result[32 * bx + 16 * t6 + t8][t14];
          // ~cuda~ preferredIdx: jjj
          for (t12 = 0; t12 <= 1; t12 += 1) 
            // ~cuda~ preferredIdx: ty
            for (t14 = 0; t14 <= 15; t14 += 1) 
              // ~cuda~ preferredIdx: k
              for (t18 = 0; t18 <= 15; t18 += 1) 
                // ~cuda~ preferredIdx: l
                for (t20 = 0; t20 <= 15; t20 += 1) 
                  _P2[(32 * t4 + 16 * t12 + t14 - (32 * t4 + t14)) / 16] += _P1[32 * t4 + 16 * t12 + t14 + t20 - 32 * t4][32 * bx + 16 * t6 + t8 + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * t4 + t12; t14 <= 32 * t4 + t12 + 16; t14 += 16) 
              result[32 * bx + 16 * t6 + t8][t14] = _P2[(t14 - (32 * t4 + t12)) / 16];
        }
    }
}t4 = 0t4 <= 127t4 += 1by = 0by <= 127by += 1// ~cuda~ preferredIdx: by
for (by = 0; by <= 127; by += 1) {
  // ~cuda~ preferredIdx: tx
  for (t6 = 0; t6 <= 46; t6 += 1) 
    // ~cuda~ preferredIdx: ty
    for (t8 = 0; t8 <= 46; t8 += 1) 
      _P1[32 * by + t6 - 32 * by][32 * bx + t8 - 32 * bx] = prev[32 * bx + t8][32 * by + t6];
  // ~cuda~ preferredIdx: iii sync
  for (t6 = 0; t6 <= 1; t6 += 1) 
    // ~cuda~ threadLoop preferredIdx: tx
    for (t8 = 0; t8 <= 15; t8 += 1) {
      // ~cuda~ preferredIdx: k
      for (t12 = 0; t12 <= 15; t12 += 1) 
        // ~cuda~ preferredIdx: l
        for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
          _P2[(t14 - (32 * by + t12)) / 16] = result[32 * bx + 16 * t6 + t8][t14];
      // ~cuda~ preferredIdx: jjj
      for (t12 = 0; t12 <= 1; t12 += 1) 
        // ~cuda~ preferredIdx: ty
        for (t14 = 0; t14 <= 15; t14 += 1) 
          // ~cuda~ preferredIdx: k
          for (t18 = 0; t18 <= 15; t18 += 1) 
            // ~cuda~ preferredIdx: l
            for (t20 = 0; t20 <= 15; t20 += 1) 
              _P2[(32 * by + 16 * t12 + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * t12 + t14 + t20 - 32 * by][32 * bx + 16 * t6 + t8 + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
      // ~cuda~ preferredIdx: k
      for (t12 = 0; t12 <= 15; t12 += 1) 
        // ~cuda~ preferredIdx: l
        for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
          result[32 * bx + 16 * t6 + t8][t14] = _P2[(t14 - (32 * by + t12)) / 16];
    }
}__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int by;
  int bx;
  for (bx = 0; bx <= 127; bx += 1) 
    for (by = 0; by <= 127; by += 1) {
      // ~cuda~ preferredIdx: tx
      for (t6 = 0; t6 <= 46; t6 += 1) 
        // ~cuda~ preferredIdx: ty
        for (t8 = 0; t8 <= 46; t8 += 1) 
          _P1[32 * by + t6 - 32 * by][32 * bx + t8 - 32 * bx] = prev[32 * bx + t8][32 * by + t6];
      // ~cuda~ preferredIdx: iii sync
      for (t6 = 0; t6 <= 1; t6 += 1) 
        // ~cuda~ threadLoop preferredIdx: tx
        for (t8 = 0; t8 <= 15; t8 += 1) {
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              _P2[(t14 - (32 * by + t12)) / 16] = result[32 * bx + 16 * t6 + t8][t14];
          // ~cuda~ preferredIdx: jjj
          for (t12 = 0; t12 <= 1; t12 += 1) 
            // ~cuda~ preferredIdx: ty
            for (t14 = 0; t14 <= 15; t14 += 1) 
              // ~cuda~ preferredIdx: k
              for (t18 = 0; t18 <= 15; t18 += 1) 
                // ~cuda~ preferredIdx: l
                for (t20 = 0; t20 <= 15; t20 += 1) 
                  _P2[(32 * by + 16 * t12 + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * t12 + t14 + t20 - 32 * by][32 * bx + 16 * t6 + t8 + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              result[32 * bx + 16 * t6 + t8][t14] = _P2[(t14 - (32 * by + t12)) / 16];
        }
    }
}t6 = 0t6 <= 46t6 += 1tx = 0tx <= 46tx += 1// ~cuda~ preferredIdx: tx
for (tx = 0; tx <= 46; tx += 1) 
  // ~cuda~ preferredIdx: ty
  for (t8 = 0; t8 <= 46; t8 += 1) 
    _P1[32 * by + tx - 32 * by][32 * bx + t8 - 32 * bx] = prev[32 * bx + t8][32 * by + tx];__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int tx;
  int by;
  int bx;
  for (bx = 0; bx <= 127; bx += 1) 
    for (by = 0; by <= 127; by += 1) {
      for (tx = 0; tx <= 46; tx += 1) 
        // ~cuda~ preferredIdx: ty
        for (t8 = 0; t8 <= 46; t8 += 1) 
          _P1[32 * by + tx - 32 * by][32 * bx + t8 - 32 * bx] = prev[32 * bx + t8][32 * by + tx];
      // ~cuda~ preferredIdx: iii sync
      for (t6 = 0; t6 <= 1; t6 += 1) 
        // ~cuda~ threadLoop preferredIdx: tx
        for (t8 = 0; t8 <= 15; t8 += 1) {
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              _P2[(t14 - (32 * by + t12)) / 16] = result[32 * bx + 16 * t6 + t8][t14];
          // ~cuda~ preferredIdx: jjj
          for (t12 = 0; t12 <= 1; t12 += 1) 
            // ~cuda~ preferredIdx: ty
            for (t14 = 0; t14 <= 15; t14 += 1) 
              // ~cuda~ preferredIdx: k
              for (t18 = 0; t18 <= 15; t18 += 1) 
                // ~cuda~ preferredIdx: l
                for (t20 = 0; t20 <= 15; t20 += 1) 
                  _P2[(32 * by + 16 * t12 + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * t12 + t14 + t20 - 32 * by][32 * bx + 16 * t6 + t8 + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              result[32 * bx + 16 * t6 + t8][t14] = _P2[(t14 - (32 * by + t12)) / 16];
        }
    }
}t8 = 0t8 <= 46t8 += 1ty = 0ty <= 46ty += 1// ~cuda~ preferredIdx: ty
for (ty = 0; ty <= 46; ty += 1) 
  _P1[32 * by + tx - 32 * by][32 * bx + ty - 32 * bx] = prev[32 * bx + ty][32 * by + tx];__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int ty;
  int tx;
  int by;
  int bx;
  for (bx = 0; bx <= 127; bx += 1) 
    for (by = 0; by <= 127; by += 1) {
      for (tx = 0; tx <= 46; tx += 1) 
        for (ty = 0; ty <= 46; ty += 1) 
          _P1[32 * by + tx - 32 * by][32 * bx + ty - 32 * bx] = prev[32 * bx + ty][32 * by + tx];
      // ~cuda~ preferredIdx: 
      for (t6 = 0; t6 <= 1; t6 += 1) 
        // ~cuda~ threadLoop preferredIdx: tx
        for (t8 = 0; t8 <= 15; t8 += 1) {
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              _P2[(t14 - (32 * by + t12)) / 16] = result[32 * bx + 16 * t6 + t8][t14];
          // ~cuda~ preferredIdx: jjj
          for (t12 = 0; t12 <= 1; t12 += 1) 
            // ~cuda~ preferredIdx: ty
            for (t14 = 0; t14 <= 15; t14 += 1) 
              // ~cuda~ preferredIdx: k
              for (t18 = 0; t18 <= 15; t18 += 1) 
                // ~cuda~ preferredIdx: l
                for (t20 = 0; t20 <= 15; t20 += 1) 
                  _P2[(32 * by + 16 * t12 + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * t12 + t14 + t20 - 32 * by][32 * bx + 16 * t6 + t8 + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              result[32 * bx + 16 * t6 + t8][t14] = _P2[(t14 - (32 * by + t12)) / 16];
        }
      __syncthreads();
    }
}t6 = 0t6 <= 1t6 += 1iii = 0iii <= 1iii += 1// ~cuda~ preferredIdx: 
for (iii = 0; iii <= 1; iii += 1) 
  // ~cuda~ threadLoop preferredIdx: tx
  for (t8 = 0; t8 <= 15; t8 += 1) {
    // ~cuda~ preferredIdx: k
    for (t12 = 0; t12 <= 15; t12 += 1) 
      // ~cuda~ preferredIdx: l
      for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
        _P2[(t14 - (32 * by + t12)) / 16] = result[32 * bx + 16 * iii + t8][t14];
    // ~cuda~ preferredIdx: jjj
    for (t12 = 0; t12 <= 1; t12 += 1) 
      // ~cuda~ preferredIdx: ty
      for (t14 = 0; t14 <= 15; t14 += 1) 
        // ~cuda~ preferredIdx: k
        for (t18 = 0; t18 <= 15; t18 += 1) 
          // ~cuda~ preferredIdx: l
          for (t20 = 0; t20 <= 15; t20 += 1) 
            _P2[(32 * by + 16 * t12 + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * t12 + t14 + t20 - 32 * by][32 * bx + 16 * iii + t8 + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
    // ~cuda~ preferredIdx: k
    for (t12 = 0; t12 <= 15; t12 += 1) 
      // ~cuda~ preferredIdx: l
      for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
        result[32 * bx + 16 * iii + t8][t14] = _P2[(t14 - (32 * by + t12)) / 16];
  }t8 = 0t8 <= 15t8 += 1tx = 0tx <= 15tx += 1// ~cuda~ threadLoop preferredIdx: tx
for (tx = 0; tx <= 15; tx += 1) {
  // ~cuda~ preferredIdx: k
  for (t12 = 0; t12 <= 15; t12 += 1) 
    // ~cuda~ preferredIdx: l
    for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
      _P2[(t14 - (32 * by + t12)) / 16] = result[32 * bx + 16 * iii + tx][t14];
  // ~cuda~ preferredIdx: jjj
  for (t12 = 0; t12 <= 1; t12 += 1) 
    // ~cuda~ preferredIdx: ty
    for (t14 = 0; t14 <= 15; t14 += 1) 
      // ~cuda~ preferredIdx: k
      for (t18 = 0; t18 <= 15; t18 += 1) 
        // ~cuda~ preferredIdx: l
        for (t20 = 0; t20 <= 15; t20 += 1) 
          _P2[(32 * by + 16 * t12 + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * t12 + t14 + t20 - 32 * by][32 * bx + 16 * iii + tx + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
  // ~cuda~ preferredIdx: k
  for (t12 = 0; t12 <= 15; t12 += 1) 
    // ~cuda~ preferredIdx: l
    for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
      result[32 * bx + 16 * iii + tx][t14] = _P2[(t14 - (32 * by + t12)) / 16];
}__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int iii;
  int ty;
  int tx;
  int by;
  int bx;
  for (bx = 0; bx <= 127; bx += 1) 
    for (by = 0; by <= 127; by += 1) {
      for (tx = 0; tx <= 46; tx += 1) 
        for (ty = 0; ty <= 46; ty += 1) 
          _P1[32 * by + tx - 32 * by][32 * bx + ty - 32 * bx] = prev[32 * bx + ty][32 * by + tx];
      for (iii = 0; iii <= 1; iii += 1) 
        for (tx = 0; tx <= 15; tx += 1) {
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              _P2[(t14 - (32 * by + t12)) / 16] = result[32 * bx + 16 * iii + tx][t14];
          // ~cuda~ preferredIdx: jjj
          for (t12 = 0; t12 <= 1; t12 += 1) 
            // ~cuda~ preferredIdx: ty
            for (t14 = 0; t14 <= 15; t14 += 1) 
              // ~cuda~ preferredIdx: k
              for (t18 = 0; t18 <= 15; t18 += 1) 
                // ~cuda~ preferredIdx: l
                for (t20 = 0; t20 <= 15; t20 += 1) 
                  _P2[(32 * by + 16 * t12 + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * t12 + t14 + t20 - 32 * by][32 * bx + 16 * iii + tx + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              result[32 * bx + 16 * iii + tx][t14] = _P2[(t14 - (32 * by + t12)) / 16];
        }
      __syncthreads();
    }
}t12 = 0t12 <= 15t12 += 1k = 0k <= 15k += 1// ~cuda~ preferredIdx: k
for (k = 0; k <= 15; k += 1) 
  // ~cuda~ preferredIdx: l
  for (t14 = 32 * by + k; t14 <= 32 * by + k + 16; t14 += 16) 
    _P2[(t14 - (32 * by + k)) / 16] = result[32 * bx + 16 * iii + tx][t14];__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int k;
  int iii;
  int ty;
  int tx;
  int by;
  int bx;
  for (bx = 0; bx <= 127; bx += 1) 
    for (by = 0; by <= 127; by += 1) {
      for (tx = 0; tx <= 46; tx += 1) 
        for (ty = 0; ty <= 46; ty += 1) 
          _P1[32 * by + tx - 32 * by][32 * bx + ty - 32 * bx] = prev[32 * bx + ty][32 * by + tx];
      for (iii = 0; iii <= 1; iii += 1) 
        for (tx = 0; tx <= 15; tx += 1) {
          for (k = 0; k <= 15; k += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + k; t14 <= 32 * by + k + 16; t14 += 16) 
              _P2[(t14 - (32 * by + k)) / 16] = result[32 * bx + 16 * iii + tx][t14];
          // ~cuda~ preferredIdx: jjj
          for (t12 = 0; t12 <= 1; t12 += 1) 
            // ~cuda~ preferredIdx: ty
            for (t14 = 0; t14 <= 15; t14 += 1) 
              // ~cuda~ preferredIdx: k
              for (t18 = 0; t18 <= 15; t18 += 1) 
                // ~cuda~ preferredIdx: l
                for (t20 = 0; t20 <= 15; t20 += 1) 
                  _P2[(32 * by + 16 * t12 + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * t12 + t14 + t20 - 32 * by][32 * bx + 16 * iii + tx + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              result[32 * bx + 16 * iii + tx][t14] = _P2[(t14 - (32 * by + t12)) / 16];
        }
      __syncthreads();
    }
}t14 = 32 * by + kt14 <= 32 * by + k + 16t14 += 16l = 32 * by + kl <= 32 * by + k + 16l += 16// ~cuda~ preferredIdx: l
for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
  _P2[(l - (32 * by + k)) / 16] = result[32 * bx + 16 * iii + tx][l];__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int l;
  int k;
  int iii;
  int ty;
  int tx;
  int by;
  int bx;
  for (bx = 0; bx <= 127; bx += 1) 
    for (by = 0; by <= 127; by += 1) {
      for (tx = 0; tx <= 46; tx += 1) 
        for (ty = 0; ty <= 46; ty += 1) 
          _P1[32 * by + tx - 32 * by][32 * bx + ty - 32 * bx] = prev[32 * bx + ty][32 * by + tx];
      for (iii = 0; iii <= 1; iii += 1) 
        for (tx = 0; tx <= 15; tx += 1) {
          for (k = 0; k <= 15; k += 1) 
            for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
              _P2[(l - (32 * by + k)) / 16] = result[32 * bx + 16 * iii + tx][l];
          // ~cuda~ preferredIdx: jjj
          for (t12 = 0; t12 <= 1; t12 += 1) 
            // ~cuda~ preferredIdx: ty
            for (t14 = 0; t14 <= 15; t14 += 1) 
              // ~cuda~ preferredIdx: k
              for (t18 = 0; t18 <= 15; t18 += 1) 
                // ~cuda~ preferredIdx: l
                for (t20 = 0; t20 <= 15; t20 += 1) 
                  _P2[(32 * by + 16 * t12 + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * t12 + t14 + t20 - 32 * by][32 * bx + 16 * iii + tx + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];
          // ~cuda~ preferredIdx: k
          for (t12 = 0; t12 <= 15; t12 += 1) 
            // ~cuda~ preferredIdx: l
            for (t14 = 32 * by + t12; t14 <= 32 * by + t12 + 16; t14 += 16) 
              result[32 * bx + 16 * iii + tx][t14] = _P2[(t14 - (32 * by + t12)) / 16];
        }
      __syncthreads();
    }
}t12 = 0t12 <= 1t12 += 1jjj = 0jjj <= 1jjj += 1// ~cuda~ preferredIdx: jjj
for (jjj = 0; jjj <= 1; jjj += 1) 
  // ~cuda~ preferredIdx: ty
  for (t14 = 0; t14 <= 15; t14 += 1) 
    // ~cuda~ preferredIdx: k
    for (t18 = 0; t18 <= 15; t18 += 1) 
      // ~cuda~ preferredIdx: l
      for (t20 = 0; t20 <= 15; t20 += 1) 
        _P2[(32 * by + 16 * jjj + t14 - (32 * by + t14)) / 16] += _P1[32 * by + 16 * jjj + t14 + t20 - 32 * by][32 * bx + 16 * iii + tx + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];t14 = 0t14 <= 15t14 += 1ty = 0ty <= 15ty += 1// ~cuda~ preferredIdx: ty
for (ty = 0; ty <= 15; ty += 1) 
  // ~cuda~ preferredIdx: k
  for (t18 = 0; t18 <= 15; t18 += 1) 
    // ~cuda~ preferredIdx: l
    for (t20 = 0; t20 <= 15; t20 += 1) 
      _P2[(32 * by + 16 * jjj + ty - (32 * by + ty)) / 16] += _P1[32 * by + 16 * jjj + ty + t20 - 32 * by][32 * bx + 16 * iii + tx + t18 - 32 * bx] * curr[t18 * (unsigned int)16 + t20];t18 = 0t18 <= 15t18 += 1k = 0k <= 15k += 1// ~cuda~ preferredIdx: k
for (k = 0; k <= 15; k += 1) 
  // ~cuda~ preferredIdx: l
  for (t20 = 0; t20 <= 15; t20 += 1) 
    _P2[(32 * by + 16 * jjj + ty - (32 * by + ty)) / 16] += _P1[32 * by + 16 * jjj + ty + t20 - 32 * by][32 * bx + 16 * iii + tx + k - 32 * bx] * curr[k * (unsigned int)16 + t20];t20 = 0t20 <= 15t20 += 1l = 0l <= 15l += 1// ~cuda~ preferredIdx: l
for (l = 0; l <= 15; l += 1) 
  _P2[(32 * by + 16 * jjj + ty - (32 * by + ty)) / 16] += _P1[32 * by + 16 * jjj + ty + l - 32 * by][32 * bx + 16 * iii + tx + k - 32 * bx] * curr[k * (unsigned int)16 + l];t12 = 0t12 <= 15t12 += 1k = 0k <= 15k += 1// ~cuda~ preferredIdx: k
for (k = 0; k <= 15; k += 1) 
  // ~cuda~ preferredIdx: l
  for (t14 = 32 * by + k; t14 <= 32 * by + k + 16; t14 += 16) 
    result[32 * bx + 16 * iii + tx][t14] = _P2[(t14 - (32 * by + k)) / 16];t14 = 32 * by + kt14 <= 32 * by + k + 16t14 += 16l = 32 * by + kl <= 32 * by + k + 16l += 16// ~cuda~ preferredIdx: l
for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
  result[32 * bx + 16 * iii + tx][l] = _P2[(l - (32 * by + k)) / 16];int bxint byint txint ty__shared__ float _P1[47][48]float prev[4096 + 16][4096 + 16]int iiiint kint lfloat _P2[2]float result[4096][4096]int jjjfloat curr[16 * 16](fake1 : ) __syncthreads()__shared__ float _P1[47][48]float prev[4096 + 16][4096 + 16]float _P2[2]float result[4096][4096]float _P2[2]__shared__ float _P1[47][48]float curr[16 * 16]float result[4096][4096]float _P2[2]__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int jjj;
  int l;
  int k;
  int iii;
  int ty= threadIdx.y;
  int tx= threadIdx.x;
  int by= blockIdx.y;
  int bx= blockIdx.x;
  for (bx = 0; bx <= 127; bx += 1) 
    for (by = 0; by <= 127; by += 1) {
      for (tx = 0; tx <= 46; tx += 1) 
        for (ty = 0; ty <= 46; ty += 1) 
          _P1[32 * by + tx - 32 * by][32 * bx + ty - 32 * bx] = prev[32 * bx + ty][32 * by + tx];
      for (iii = 0; iii <= 1; iii += 1) 
        for (tx = 0; tx <= 15; tx += 1) {
          for (k = 0; k <= 15; k += 1) 
            for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
              _P2[(l - (32 * by + k)) / 16] = result[32 * bx + 16 * iii + tx][l];
          for (jjj = 0; jjj <= 1; jjj += 1) 
            for (ty = 0; ty <= 15; ty += 1) 
              for (k = 0; k <= 15; k += 1) 
                for (l = 0; l <= 15; l += 1) 
                  _P2[(32 * by + 16 * jjj + ty - (32 * by + ty)) / 16] += _P1[32 * by + 16 * jjj + ty + l - 32 * by][32 * bx + 16 * iii + tx + k - 32 * bx] * curr[k * (unsigned int)16 + l];
          for (k = 0; k <= 15; k += 1) 
            for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
              result[32 * bx + 16 * iii + tx][l] = _P2[(l - (32 * by + k)) / 16];
        }
      __syncthreads();
    }
}__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int jjj;
  int l;
  int k;
  int iii;
  int ty= threadIdx.y;
  int tx= threadIdx.x;
  int by= blockIdx.y;
  int bx= blockIdx.x;
  for (bx = 0; bx <= 127; bx += 1) 
    for (by = 0; by <= 127; by += 1) {
      for (tx = 0; tx <= 46; tx += 1) 
        for (ty = 0; ty <= 46; ty += 1) 
          _P1[32 * by + tx - 32 * by][32 * bx + ty - 32 * bx] = prev[32 * bx + ty][32 * by + tx];
      for (iii = 0; iii <= 1; iii += 1) 
        for (tx = 0; tx <= 15; tx += 1) {
          for (k = 0; k <= 15; k += 1) 
            for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
              _P2[(l - (32 * by + k)) / 16] = result[32 * bx + 16 * iii + tx][l];
          for (jjj = 0; jjj <= 1; jjj += 1) 
            for (ty = 0; ty <= 15; ty += 1) 
              for (k = 0; k <= 15; k += 1) 
                for (l = 0; l <= 15; l += 1) 
                  _P2[(32 * by + 16 * jjj + ty - (32 * by + ty)) / 16] += _P1[32 * by + 16 * jjj + ty + l - 32 * by][32 * bx + 16 * iii + tx + k - 32 * bx] * curr[k * (unsigned int)16 + l];
          for (k = 0; k <= 15; k += 1) 
            for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
              result[32 * bx + 16 * iii + tx][l] = _P2[(l - (32 * by + k)) / 16];
        }
      __syncthreads();
    }
}__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int jjj;
  int l;
  int k;
  int iii;
  int ty= threadIdx.y;
  int tx= threadIdx.x;
  int by= blockIdx.y;
  int bx= blockIdx.x;
  for (bx = 0; bx <= 127; bx += 1) 
    for (by = 0; by <= 127; by += 1) {
      for (tx = 0; tx <= 46; tx += 1) 
        for (ty = 0; ty <= 46; ty += 1) 
          _P1[32 * by + tx - 32 * by][32 * bx + ty - 32 * bx] = prev[32 * bx + ty][32 * by + tx];
      for (iii = 0; iii <= 1; iii += 1) 
        for (tx = 0; tx <= 15; tx += 1) {
          for (k = 0; k <= 15; k += 1) 
            for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
              _P2[(l - (32 * by + k)) / 16] = result[32 * bx + 16 * iii + tx][l];
          for (jjj = 0; jjj <= 1; jjj += 1) 
            for (ty = 0; ty <= 15; ty += 1) 
              for (k = 0; k <= 15; k += 1) 
                for (l = 0; l <= 15; l += 1) 
                  _P2[(32 * by + 16 * jjj + ty - (32 * by + ty)) / 16] += _P1[32 * by + 16 * jjj + ty + l - 32 * by][32 * bx + 16 * iii + tx + k - 32 * bx] * curr[k * (unsigned int)16 + l];
          for (k = 0; k <= 15; k += 1) 
            for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
              result[32 * bx + 16 * iii + tx][l] = _P2[(l - (32 * by + k)) / 16];
        }
      __syncthreads();
    }
}__global__ void kernel_GPU(float *prev[4096 + 16], float *result[4096], float *curr) {
  int jjj;
  int l;
  int k;
  int iii;
  int ty= threadIdx.y;
  int tx= threadIdx.x;
  int by= blockIdx.y;
  int bx= blockIdx.x;
  
    {
      
        
          _P1[32 * by + tx - 32 * by][32 * bx + ty - 32 * bx] = prev[32 * bx + ty][32 * by + tx];;;
      for (iii = 0; iii <= 1; iii += 1) 
        {
          for (k = 0; k <= 15; k += 1) 
            for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
              _P2[(l - (32 * by + k)) / 16] = result[32 * bx + 16 * iii + tx][l];
          for (jjj = 0; jjj <= 1; jjj += 1) 
            
              for (k = 0; k <= 15; k += 1) 
                for (l = 0; l <= 15; l += 1) 
                  _P2[(32 * by + 16 * jjj + ty - (32 * by + ty)) / 16] += _P1[32 * by + 16 * jjj + ty + l - 32 * by][32 * bx + 16 * iii + tx + k - 32 * bx] * curr[k * (unsigned int)16 + l];;
          for (k = 0; k <= 15; k += 1) 
            for (l = 32 * by + k; l <= 32 * by + k + 16; l += 16) 
              result[32 * bx + 16 * iii + tx][l] = _P2[(l - (32 * by + k)) / 16];
        };
      __syncthreads();
    };;
}_P2[(chill_t132 - (32 * chill_t126 + chill_t131)) / 16] += _P1[chill_t132 + chill_t134 - 32 * chill_t126][chill_t129 + chill_t133 - 32 * chill_t125] * curr[chill_t133 * (unsigned int)16 + chill_t134]_P1[chill_t124 - 32 * chill_t118][chill_t122 - 32 * chill_t117] = prev[chill_t122][chill_t124]_P2[(chill_t136 - (32 * chill_t126 + chill_t131)) / 16] = result[32 * chill_t125 + 16 * chill_t127 + chill_t128][chill_t136]result[32 * chill_t125 + 16 * chill_t127 + chill_t128][chill_t136] = _P2[(chill_t136 - (32 * chill_t126 + chill_t131)) / 16]