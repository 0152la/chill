Unhandled case in scanner: SourceFile
Looking for def int
Looking for def int
Looking for def float
Looking for def float
Looking for def float
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: CStyleCastExpr
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: CStyleCastExpr
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: ReturnStmt
Unhandled case in scanner: CallExpr
Unhandled case in scanner: ReturnStmt
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: SourceFile
Unhandled case in scanner: FunctionDecl
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: VarDecl
Unhandled case in scanner: VarDecl
Unhandled case in scanner: VarDecl
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: VarDecl
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: VarDecl
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: CStyleCastExpr
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: CStyleCastExpr
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: ReturnStmt
Unhandled case in scanner: FunctionDecl
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: CallExpr
Unhandled case in scanner: ReturnStmt
Unhandled case in scanner: IntegerLiteral
Relation r   {[J,I] : TRUE }
s1: (dim:0) (dim:1) 
dependence graph:
0->0: A:flow(0, 2~98) A:flow(0, 0) A:anti(0, 2~98)
{[J,I] -> [chill_t1,chill_t2] : J = chill_t1 && I = chill_t2 }
{[chill_t1,chill_t2] -> [chill_t3,chill_t4] : chill_t1 = chill_t3 && chill_t2 = chill_t4 }
{[chill_t3,chill_t4] -> [chill_t5,chill_t6] : chill_t3 = chill_t5 && chill_t4 = chill_t6 }
{[chill_t5,chill_t6] -> [chill_t7,chill_t8] : chill_t5 = chill_t7 && chill_t6 = chill_t8 }
{[chill_t5,chill_t6] -> [chill_t7,chill_t8] : chill_t5 = chill_t7 && chill_t6 = chill_t8 }
{[chill_t7,chill_t8] -> [chill_t9,chill_t10] : chill_t7 = chill_t9 && chill_t8 = chill_t10 }
{[chill_t7,chill_t8] -> [chill_t9,chill_t10] : chill_t7 = chill_t9 && chill_t8 = chill_t10 }
{[chill_t9,chill_t10] -> [chill_t11,chill_t12] : chill_t9 = chill_t11 && chill_t10 = chill_t12 }
{[chill_t9,chill_t10] -> [chill_t11,chill_t12] : chill_t9 = chill_t11 && chill_t10 = chill_t12 }

xforms:
{[In_1,In_2] -> [Out_1,Out_2,Out_3,Out_4,Out_5] : In_1 = Out_2 && In_2 = Out_4 && Out_1 = 0 && Out_3 = 0 && Out_5 = 0 }

{[In_1,In_2] -> [Out_1,Out_2,Out_3,Out_4,Out_5] : In_1 = Out_2 && In_2 = Out_4 && Out_1 = 0 && Out_3 = 0 && Out_5 = 1 }

{[In_1,In_2] -> [Out_1,Out_2,Out_3,Out_4,Out_5] : exists ( alpha,beta,gamma,delta,tau : ( alpha = Out_1 && beta = Out_2 && gamma = Out_3 && delta = Out_4 && Out_5 = 2 && In_1 = beta && In_2 = delta && alpha = 0 && gamma = 0 && tau = 0 )) }


IS:
{[chill_t11,chill_t12] : chill_t11 = 1 && 1 <= chill_t12 <= 99 and 1 <= chill_t12 and exists ( e17,e18 : ( chill_t12 = e17+99e18 && 1 <= e17 and ( 1 = e17 ) )) }

{[chill_t11,chill_t12] : chill_t11 = 1 && 1 <= chill_t12 <= 99 and 1 <= chill_t12 and exists ( e19,e20 : ( chill_t12 = e19+99e20 && 1 <= e19 and ( 1 = e19 ) )) }

{[chill_t11,chill_t12] : chill_t11 = 1 && 1 <= chill_t12 <= 99 and 1 <= chill_t12 and exists ( e17,e18 : ( chill_t12 = e17+99e18 && 1 <= e17 and ( 1 = e17 ) )) }


known:
{[In_1,In_2,In_3,In_4,In_5] : TRUE }


