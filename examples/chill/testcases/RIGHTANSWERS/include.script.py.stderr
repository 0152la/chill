Omega initialized
in C, initchill() to set up C methods to be called from python
ConvertRoseFile(  SgGlobal *sg, filename include.c );
TOPMOST located node
sourcefile is '/home/derick/dev/chill/chill-src/examples/chill/testcases/include.c'
428 top nodes
unhandled top node 418/428 of type SgPragmaDeclaration

functiondecl                     notfrom blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/included.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/include.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( notfrom )


***  ConvertRoseInitName()  i
initname i
varname 'i'
original vartype 0x5be36310 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
new parameter:
notfrom chillAST_FunctionDecl::addParameter( 0x2c41890  param i)   total of 1 parameters
got body
1 statements in FunctionDecl body
chillCS is 0x2ff9c60

statement 0     return i + 1;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgReturnStmt
ConvertRoseReturnStmt() parent 0x7f6910555290
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal

functiondecl                     ALSOnotfrom blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/included.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/include.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( ALSOnotfrom )


***  ConvertRoseInitName()  i
initname i
varname 'i'
original vartype 0x5be36310 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
new parameter:
ALSOnotfrom chillAST_FunctionDecl::addParameter( 0x2c466f0  param i)   total of 1 parameters
got body
1 statements in FunctionDecl body
chillCS is 0x2ff3410

statement 0     return i + 2;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgReturnStmt
ConvertRoseReturnStmt() parent 0x7f6910555290
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 2
op is +
LHS is i
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal

functiondecl                     main blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/include.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/include.c
SAME FILE

ConvertRoseFunctionDecl( main )

hey! comments! on a FunctionDecl
4 preprocessing info

a #define #define uint64_t unsigned int

a #define #define THISISDEFINED  buh 

a #include #include "defines.h"   // local 

a #include #include "included.c"  // local 

got body
3 statements in FunctionDecl body
chillCS is 0x2be2500

statement 0     int i;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  i
initname i
varname 'i'
original vartype 0x5be361f0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

statement 1     for(i = 0;i < 100;i++) {}
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f6910555290
for(i = 0;i < 100;i++) {}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 100
op is <
LHS is i
RHS is 100
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock

hey! comments! on a CompoundStmt
1 preprocessing info

a comment  // nothing to see here


statement 2     return 0;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgReturnStmt
ConvertRoseReturnStmt() parent 0x7f6910555290
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
top node 422/428    SgSymbolTable  (IGNORING)
unhandled top node 423/428 of type SgTypeTable
topnode 424 of 428, first == NULL??  blurb numeric_label
top node 425/428    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/include.c  line 0   col 0
top node 426/428    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/include.c  line 0   col 0
unhandled top node 427/428 of type SgSourceFile
(top)node has 3 children
node of type SourceFile is recursing to child 0 of type FunctionDecl
child 0 is functiondecl notfrom
(top)node has 1 children
(top)node has 1 children
(top)node has 1 children
(top)node has 2 children
(top)node has 0 children
(top)node has 0 children
node of type SourceFile is recursing to child 1 of type FunctionDecl
child 1 is functiondecl ALSOnotfrom
(top)node has 1 children
(top)node has 1 children
(top)node has 1 children
(top)node has 2 children
(top)node has 0 children
(top)node has 0 children
node of type SourceFile is recursing to child 2 of type FunctionDecl
child 2 is functiondecl main

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillCode::MergeNeighboringControlStructures  1 controls
control 0 is IR_CONTROL_LOOP

Loop::Loop(const IR_Control *control)
control type is 3   IR_CONTROL_BLOCK
2set last_compute_cg_ = NULL; 
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts

                                                  Loop::init_loop()
extract_ir_stmts()
ir_tree has 1 statements
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
nesting level stmt size = 1
1 statements?
i 0
stmt_nesting_level[0] = 1
in init_loop, made 1 stmts
max nesting level 1 at location 0
loop.cc L356  n_dim now max_nesting_level 1
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 0
making CHILL scalar symbol i
index[0] = 'i'
align loops by names,

set relation variable names                      ****
Relation r(1)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[0].loop_level has size n_dim 1
for int i < n_dim(1)
whew
                                        loop.cc   Loop::init_loop() END

after init_loop, 0 freevar
loop.cc after init_loop, 1 statements
dv.first.size() 0


*** LOTS OF REDUCTIONS ***


i range 1
i 0
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames

loop.cc Loop::printCode(  effort 3 )
Loop::printCode(), last_compute_cg_ == NULL
leaving Loop::printCode()
BIG IF
fail 0
big if true
CUDACHILL IS NOT DEFINED
calling ROSE code gen?    loop num 0 - 0

loop.cc Loop::getCode(  effort 3 )
Loop::getCode() last_compute_cg_ NOT NULL
1 stmts
calling last_compute_cgr_->printRepr()
t2 was already defined in the function body
t2 was already defined in the function body

loop.cc Loop::getCode( effort 3 )   DONE
IR_chillCode::ReplaceCode( old, *repr)
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ReturnStmt) uses default gatherVarDecls()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
printing as part of the destructor
(FunctionDecl) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ReturnStmt) forgot to implement gatherVarUsage()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ReturnStmt) uses default gatherVarDecls()
