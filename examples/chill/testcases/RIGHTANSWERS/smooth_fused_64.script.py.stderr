Omega initialized
in C, initchill() to set up C methods to be called from python
"/home/derick/dev/chill/chill-src/examples/chill/testcases/smooth_fused_64.c", line 14: warning: 
          return type of function "main" must be "int"
  void main(box_type *box, int phi_id, int rhs_id, int temp_phi_id, double a, double b, double h, int sweep){
       ^

"/home/derick/dev/chill/chill-src/examples/chill/testcases/smooth_fused_64.c", line 81: warning: 
          variable "ghostsToOperateOn" was declared but never referenced
    int ghostsToOperateOn=ghosts-1;
        ^

ConvertRoseFile(  SgGlobal *sg, filename smooth_fused_64.c );
TOPMOST located node
sourcefile is '/home/derick/dev/chill/chill-src/examples/chill/testcases/smooth_fused_64.c'
428 top nodes

TYPEDEF



418   0x7f8c07fee010   declarations    node SgTypedefDeclaration
typedef gonna be a struct
that's all

ConvertRoseStructDeclaration( CLASSDEC )
struct name is 'boxdoth'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::low
initname boxdoth::low
varname 'low'
original vartype 0x1042fe0 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'low' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x127fc90'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x127fc90::i
initname __anonymous_0x127fc90::i
varname 'i'
original vartype 0x6df03f90 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x127fc90::j
initname __anonymous_0x127fc90::j
varname 'j'
original vartype 0x6df03f90 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x127fc90::k
initname __anonymous_0x127fc90::k
varname 'k'
original vartype 0x6df03f90 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting low uniquePtr to 0x7f8c08192a00 the SgVariableDeclaration that defined it?
STORING vardecl low in global VariableDeclarations 4
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}low;' with unique value 0x7f8c08192a00 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::dim
initname boxdoth::dim
varname 'dim'
original vartype 0x1042fe0 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'dim' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x12807a0'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x12807a0::i
initname __anonymous_0x12807a0::i
varname 'i'
original vartype 0x6df03f90 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x12807a0::j
initname __anonymous_0x12807a0::j
varname 'j'
original vartype 0x6df03f90 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x12807a0::k
initname __anonymous_0x12807a0::k
varname 'k'
original vartype 0x6df03f90 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting dim uniquePtr to 0x7f8c08193740 the SgVariableDeclaration that defined it?
STORING vardecl dim in global VariableDeclarations 8
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}dim;' with unique value 0x7f8c08193740 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::dim_with_ghosts
initname boxdoth::dim_with_ghosts
varname 'dim_with_ghosts'
original vartype 0x103a220 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_with_ghosts' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x1282530'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1282530::i
initname __anonymous_0x1282530::i
varname 'i'
original vartype 0x6df03f90 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1282530::j
initname __anonymous_0x1282530::j
varname 'j'
original vartype 0x6df03f90 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1282530::k
initname __anonymous_0x1282530::k
varname 'k'
original vartype 0x6df03f90 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting dim_with_ghosts uniquePtr to 0x7f8c08194480 the SgVariableDeclaration that defined it?
STORING vardecl dim_with_ghosts in global VariableDeclarations 12
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}dim_with_ghosts;' with unique value 0x7f8c08194480 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::ghosts
initname boxdoth::ghosts
varname 'ghosts'
original vartype 0x6df040f0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int ghosts;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::pencil
initname boxdoth::pencil
varname 'pencil'
original vartype 0x6df040f0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'pencil' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int pencil;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::plane
initname boxdoth::plane
varname 'plane'
original vartype 0x6df040f0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'plane' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int plane;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::volume
initname boxdoth::volume
varname 'volume'
original vartype 0x6df040f0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'volume' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int volume;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::bufsizes
initname boxdoth::bufsizes
varname 'bufsizes'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x6df040f0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'bufsizes' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int bufsizes[27];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::surface_bufs
initname boxdoth::surface_bufs
varname 'surface_bufs'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x103ba50 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'surface_bufs' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ surface_bufs[27];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::ghost_bufs
initname boxdoth::ghost_bufs
varname 'ghost_bufs'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x103ac30 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'ghost_bufs' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ ghost_bufs[27];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::numGrids
initname boxdoth::numGrids
varname 'numGrids'
original vartype 0x6df040f0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int numGrids;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::grids
initname boxdoth::grids
varname 'grids'
original vartype 0x103ac30 'double ** __restrict__'
HACK vartype double arraypart **
ConvertRoseInitName()  storing variable declaration 'grids' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double ** __restrict__ grids;' with unique value (nil) from  SgInitializedName
now have recorddecl

functiondecl                     destroy_box blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/box.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/smooth_fused_64.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( destroy_box )


***  ConvertRoseInitName()  box
initname box
varname 'box'
original vartype 0x6df042e0 'box_type'
HACK vartype box_type arraypart 
ConvertRoseInitName()  storing variable declaration 'box' with unique value (nil)
new parameter:
destroy_box chillAST_FunctionDecl::addParameter( 0x1042980  param box)   total of 1 parameters

functiondecl                     create_box blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/box.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/smooth_fused_64.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( create_box )


***  ConvertRoseInitName()  box
initname box
varname 'box'
original vartype 0x6df042e0 'box_type'
HACK vartype box_type arraypart 
ConvertRoseInitName()  storing variable declaration 'box' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x10386d0  param box)   total of 1 parameters


***  ConvertRoseInitName()  numGrids
initname numGrids
varname 'numGrids'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1271730  param numGrids)   total of 2 parameters


***  ConvertRoseInitName()  low_i
initname low_i
varname 'low_i'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'low_i' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1271910  param low_i)   total of 3 parameters


***  ConvertRoseInitName()  low_j
initname low_j
varname 'low_j'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'low_j' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1271ad0  param low_j)   total of 4 parameters


***  ConvertRoseInitName()  low_k
initname low_k
varname 'low_k'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'low_k' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1271cb0  param low_k)   total of 5 parameters


***  ConvertRoseInitName()  dim_i
initname dim_i
varname 'dim_i'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_i' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1271ee0  param dim_i)   total of 6 parameters


***  ConvertRoseInitName()  dim_j
initname dim_j
varname 'dim_j'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_j' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x12720c0  param dim_j)   total of 7 parameters


***  ConvertRoseInitName()  dim_k
initname dim_k
varname 'dim_k'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_k' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x12722a0  param dim_k)   total of 8 parameters


***  ConvertRoseInitName()  ghosts
initname ghosts
varname 'ghosts'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1272480  param ghosts)   total of 9 parameters

functiondecl                     main blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/smooth_fused_64.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/smooth_fused_64.c
SAME FILE

ConvertRoseFunctionDecl( main )

hey! comments! on a FunctionDecl
11 preprocessing info

a comment  //------------------------------------------------------------------------------------------------------------------------------

a #include #include "defines.h"

a #include #include "box.h"

a comment  //------------------------------------------------------------------------------------------------------------------------------

a #define #define PR_SIZE 64

a #define #define GHOSTS 4

a comment  //------------------------------------------------------------------------------------------------------------------------------

a comment  //Protonu--should rename this function

a comment  //1. smooth_multiple_laplaceGSRB4

a comment  //2. smooth_multiple_helmholtzGSRB4

a comment  //3. smooth_multiple_SOR



***  ConvertRoseInitName()  box
initname box
varname 'box'
original vartype 0x6df042e0 'box_type'
HACK vartype box_type arraypart 
ConvertRoseInitName()  storing variable declaration 'box' with unique value (nil)
new parameter:
main chillAST_FunctionDecl::addParameter( 0x12736e0  param box)   total of 1 parameters


***  ConvertRoseInitName()  phi_id
initname phi_id
varname 'phi_id'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'phi_id' with unique value (nil)
new parameter:
main chillAST_FunctionDecl::addParameter( 0x1273900  param phi_id)   total of 2 parameters


***  ConvertRoseInitName()  rhs_id
initname rhs_id
varname 'rhs_id'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'rhs_id' with unique value (nil)
new parameter:
main chillAST_FunctionDecl::addParameter( 0x1273bf0  param rhs_id)   total of 3 parameters


***  ConvertRoseInitName()  temp_phi_id
initname temp_phi_id
varname 'temp_phi_id'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'temp_phi_id' with unique value (nil)
new parameter:
main chillAST_FunctionDecl::addParameter( 0x1273dd0  param temp_phi_id)   total of 4 parameters


***  ConvertRoseInitName()  a
initname a
varname 'a'
original vartype 0x6df042e0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'a' with unique value (nil)
new parameter:
main chillAST_FunctionDecl::addParameter( 0x1273fb0  param a)   total of 5 parameters


***  ConvertRoseInitName()  b
initname b
varname 'b'
original vartype 0x6df042e0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'b' with unique value (nil)
new parameter:
main chillAST_FunctionDecl::addParameter( 0x1274190  param b)   total of 6 parameters


***  ConvertRoseInitName()  h
initname h
varname 'h'
original vartype 0x6df042e0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'h' with unique value (nil)
new parameter:
main chillAST_FunctionDecl::addParameter( 0x1274370  param h)   total of 7 parameters


***  ConvertRoseInitName()  sweep
initname sweep
varname 'sweep'
original vartype 0x6df042e0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'sweep' with unique value (nil)
new parameter:
main chillAST_FunctionDecl::addParameter( 0x1274550  param sweep)   total of 8 parameters
got body
42 statements in FunctionDecl body
chillCS is 0x1274790

statement 0     int i;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  i
initname i
varname 'i'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

statement 1     int j;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  j
initname j
varname 'j'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

statement 2     int k;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  k
initname k
varname 'k'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

statement 3     int s;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  s
initname s
varname 's'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 's' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int s;' with unique value (nil) from  SgInitializedName

statement 4     int I;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  I
initname I
varname 'I'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'I' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int I;' with unique value (nil) from  SgInitializedName

statement 5     int J;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  J
initname J
varname 'J'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'J' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int J;' with unique value (nil) from  SgInitializedName

statement 6     int K;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  K
initname K
varname 'K'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'K' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int K;' with unique value (nil) from  SgInitializedName

statement 7     int pencil = box -> pencil;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  pencil
initname pencil
varname 'pencil'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'pencil' with unique value (nil)
pencil gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'int pencil = box -> pencil;' with unique value (nil) from  SgInitializedName

statement 8     int plane = box -> plane;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  plane
initname plane
varname 'plane'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'plane' with unique value (nil)
plane gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'int plane = box -> plane;' with unique value (nil) from  SgInitializedName

statement 9     int ghosts = box -> ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  ghosts
initname ghosts
varname 'ghosts'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
ghosts gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'int ghosts = box -> ghosts;' with unique value (nil) from  SgInitializedName

statement 10     double h2inv = 1.0 /(h * h);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  h2inv
initname h2inv
varname 'h2inv'
original vartype 0x6df041c0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'h2inv' with unique value (nil)
h2inv gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
1.0 /(h * h)
op is /
LHS is 1.0
RHS is (h * h)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
(h * h)
op is *
LHS is h
RHS is h
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double h2inv = 1.0 /(h * h);' with unique value (nil) from  SgInitializedName

statement 11     double * __restrict__ phi = box -> grids[phi_id] + ghosts * plane + ghosts * pencil + ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  phi
initname phi
varname 'phi'
original vartype 0x1275f60 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'phi' with unique value (nil)
phi gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[phi_id] + ghosts * plane + ghosts * pencil + ghosts
op is +
LHS is box -> grids[phi_id] + ghosts * plane + ghosts * pencil
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[phi_id] + ghosts * plane + ghosts * pencil
op is +
LHS is box -> grids[phi_id] + ghosts * plane
RHS is ghosts * pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[phi_id] + ghosts * plane
op is +
LHS is box -> grids[phi_id]
RHS is ghosts * plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * plane
op is *
LHS is ghosts
RHS is plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * pencil
op is *
LHS is ghosts
RHS is pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ phi = box -> grids[phi_id] + ghosts * plane + ghosts * pencil + ghosts;' with unique value (nil) from  SgInitializedName

hey! comments! on a VarDecl
1 preprocessing info

a comment  // i.e. [0] = first non ghost zone point


statement 12     double * __restrict__ rhs = box -> grids[rhs_id] + ghosts * plane + ghosts * pencil + ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  rhs
initname rhs
varname 'rhs'
original vartype 0x1276ff0 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'rhs' with unique value (nil)
rhs gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[rhs_id] + ghosts * plane + ghosts * pencil + ghosts
op is +
LHS is box -> grids[rhs_id] + ghosts * plane + ghosts * pencil
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[rhs_id] + ghosts * plane + ghosts * pencil
op is +
LHS is box -> grids[rhs_id] + ghosts * plane
RHS is ghosts * pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[rhs_id] + ghosts * plane
op is +
LHS is box -> grids[rhs_id]
RHS is ghosts * plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * plane
op is *
LHS is ghosts
RHS is plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * pencil
op is *
LHS is ghosts
RHS is pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ rhs = box -> grids[rhs_id] + ghosts * plane + ghosts * pencil + ghosts;' with unique value (nil) from  SgInitializedName

statement 13     double * __restrict__ alpha = box -> grids[2] + ghosts * plane + ghosts * pencil + ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  alpha
initname alpha
varname 'alpha'
original vartype 0x1276ff0 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'alpha' with unique value (nil)
alpha gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[2] + ghosts * plane + ghosts * pencil + ghosts
op is +
LHS is box -> grids[2] + ghosts * plane + ghosts * pencil
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[2] + ghosts * plane + ghosts * pencil
op is +
LHS is box -> grids[2] + ghosts * plane
RHS is ghosts * pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[2] + ghosts * plane
op is +
LHS is box -> grids[2]
RHS is ghosts * plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * plane
op is *
LHS is ghosts
RHS is plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * pencil
op is *
LHS is ghosts
RHS is pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ alpha = box -> grids[2] + ghosts * plane + ghosts * pencil + ghosts;' with unique value (nil) from  SgInitializedName

statement 14     double * __restrict__ beta_i = box -> grids[3] + ghosts * plane + ghosts * pencil + ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  beta_i
initname beta_i
varname 'beta_i'
original vartype 0x1276ff0 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'beta_i' with unique value (nil)
beta_i gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[3] + ghosts * plane + ghosts * pencil + ghosts
op is +
LHS is box -> grids[3] + ghosts * plane + ghosts * pencil
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[3] + ghosts * plane + ghosts * pencil
op is +
LHS is box -> grids[3] + ghosts * plane
RHS is ghosts * pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[3] + ghosts * plane
op is +
LHS is box -> grids[3]
RHS is ghosts * plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * plane
op is *
LHS is ghosts
RHS is plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * pencil
op is *
LHS is ghosts
RHS is pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ beta_i = box -> grids[3] + ghosts * plane + ghosts * pencil + ghosts;' with unique value (nil) from  SgInitializedName

statement 15     double * __restrict__ beta_j = box -> grids[4] + ghosts * plane + ghosts * pencil + ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  beta_j
initname beta_j
varname 'beta_j'
original vartype 0x1276ff0 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'beta_j' with unique value (nil)
beta_j gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[4] + ghosts * plane + ghosts * pencil + ghosts
op is +
LHS is box -> grids[4] + ghosts * plane + ghosts * pencil
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[4] + ghosts * plane + ghosts * pencil
op is +
LHS is box -> grids[4] + ghosts * plane
RHS is ghosts * pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[4] + ghosts * plane
op is +
LHS is box -> grids[4]
RHS is ghosts * plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * plane
op is *
LHS is ghosts
RHS is plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * pencil
op is *
LHS is ghosts
RHS is pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ beta_j = box -> grids[4] + ghosts * plane + ghosts * pencil + ghosts;' with unique value (nil) from  SgInitializedName

statement 16     double * __restrict__ beta_k = box -> grids[5] + ghosts * plane + ghosts * pencil + ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  beta_k
initname beta_k
varname 'beta_k'
original vartype 0x1276ff0 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'beta_k' with unique value (nil)
beta_k gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[5] + ghosts * plane + ghosts * pencil + ghosts
op is +
LHS is box -> grids[5] + ghosts * plane + ghosts * pencil
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[5] + ghosts * plane + ghosts * pencil
op is +
LHS is box -> grids[5] + ghosts * plane
RHS is ghosts * pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[5] + ghosts * plane
op is +
LHS is box -> grids[5]
RHS is ghosts * plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * plane
op is *
LHS is ghosts
RHS is plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * pencil
op is *
LHS is ghosts
RHS is pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ beta_k = box -> grids[5] + ghosts * plane + ghosts * pencil + ghosts;' with unique value (nil) from  SgInitializedName

statement 17     double * __restrict__ lambda = box -> grids[6] + ghosts * plane + ghosts * pencil + ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  lambda
initname lambda
varname 'lambda'
original vartype 0x1276190 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'lambda' with unique value (nil)
lambda gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[6] + ghosts * plane + ghosts * pencil + ghosts
op is +
LHS is box -> grids[6] + ghosts * plane + ghosts * pencil
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[6] + ghosts * plane + ghosts * pencil
op is +
LHS is box -> grids[6] + ghosts * plane
RHS is ghosts * pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[6] + ghosts * plane
op is +
LHS is box -> grids[6]
RHS is ghosts * plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * plane
op is *
LHS is ghosts
RHS is plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * pencil
op is *
LHS is ghosts
RHS is pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ lambda = box -> grids[6] + ghosts * plane + ghosts * pencil + ghosts;' with unique value (nil) from  SgInitializedName

statement 18     double * __restrict__ temp = box -> grids[temp_phi_id] + ghosts * plane + ghosts * pencil + ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  temp
initname temp
varname 'temp'
original vartype 0x1276190 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'temp' with unique value (nil)
temp gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[temp_phi_id] + ghosts * plane + ghosts * pencil + ghosts
op is +
LHS is box -> grids[temp_phi_id] + ghosts * plane + ghosts * pencil
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[temp_phi_id] + ghosts * plane + ghosts * pencil
op is +
LHS is box -> grids[temp_phi_id] + ghosts * plane
RHS is ghosts * pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
box -> grids[temp_phi_id] + ghosts * plane
op is +
LHS is box -> grids[temp_phi_id]
RHS is ghosts * plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * plane
op is *
LHS is ghosts
RHS is plane
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
ghosts * pencil
op is *
LHS is ghosts
RHS is pencil
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ temp = box -> grids[temp_phi_id] + ghosts * plane + ghosts * pencil + ghosts;' with unique value (nil) from  SgInitializedName

statement 19     double(*_phi)[64 + 8][64 + 8];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _phi
initname _phi
varname '_phi'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x6df041c0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_phi' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double(*_phi)[64 + 8][64 + 8];' with unique value (nil) from  SgInitializedName

hey! comments! on a VarDecl
1 preprocessing info

a comment  //Protonu--hacks to get CHiLL's dependence analysis to work


statement 20     double(*_rhs)[64 + 8][64 + 8];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _rhs
initname _rhs
varname '_rhs'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x6df041c0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_rhs' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double(*_rhs)[64 + 8][64 + 8];' with unique value (nil) from  SgInitializedName

statement 21     double(*_alpha)[64 + 8][64 + 8];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _alpha
initname _alpha
varname '_alpha'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x6df041c0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_alpha' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double(*_alpha)[64 + 8][64 + 8];' with unique value (nil) from  SgInitializedName

statement 22     double(*_beta_i)[64 + 8][64 + 8];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _beta_i
initname _beta_i
varname '_beta_i'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x6df041c0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_beta_i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double(*_beta_i)[64 + 8][64 + 8];' with unique value (nil) from  SgInitializedName

statement 23     double(*_beta_j)[64 + 8][64 + 8];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _beta_j
initname _beta_j
varname '_beta_j'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x6df041c0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_beta_j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double(*_beta_j)[64 + 8][64 + 8];' with unique value (nil) from  SgInitializedName

statement 24     double(*_beta_k)[64 + 8][64 + 8];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _beta_k
initname _beta_k
varname '_beta_k'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x6df041c0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_beta_k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double(*_beta_k)[64 + 8][64 + 8];' with unique value (nil) from  SgInitializedName

statement 25     double(*_lambda)[64 + 8][64 + 8];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _lambda
initname _lambda
varname '_lambda'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x6df041c0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_lambda' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double(*_lambda)[64 + 8][64 + 8];' with unique value (nil) from  SgInitializedName

statement 26     double(*_temp)[64 + 8][64 + 8];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _temp
initname _temp
varname '_temp'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
64 + 8
op is +
LHS is 64
RHS is 8
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x6df041c0 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_temp' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double(*_temp)[64 + 8][64 + 8];' with unique value (nil) from  SgInitializedName

statement 27     _phi =((double(*)[64 + 8][64 + 8])phi);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _phi =((double(*)[64 + 8][64 + 8])phi);

ConvertRoseBinaryOp()
_phi =((double(*)[64 + 8][64 + 8])phi)
op is =
LHS is _phi
RHS is ((double(*)[64 + 8][64 + 8])phi)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgCastExp
ConvertRoseCastExp()  casttype 2 = C Style    ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

hey! comments! on a BinaryOperator
4 preprocessing info

a comment  //Protonu--more hack, this might have to re-implemented later

a comment  //extracring the offsets, with CHiLL we can set bounds to these values


statement 28     _rhs =((double(*)[64 + 8][64 + 8])rhs);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _rhs =((double(*)[64 + 8][64 + 8])rhs);

ConvertRoseBinaryOp()
_rhs =((double(*)[64 + 8][64 + 8])rhs)
op is =
LHS is _rhs
RHS is ((double(*)[64 + 8][64 + 8])rhs)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgCastExp
ConvertRoseCastExp()  casttype 2 = C Style    ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 29     _alpha =((double(*)[64 + 8][64 + 8])alpha);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _alpha =((double(*)[64 + 8][64 + 8])alpha);

ConvertRoseBinaryOp()
_alpha =((double(*)[64 + 8][64 + 8])alpha)
op is =
LHS is _alpha
RHS is ((double(*)[64 + 8][64 + 8])alpha)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgCastExp
ConvertRoseCastExp()  casttype 2 = C Style    ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 30     _beta_i =((double(*)[64 + 8][64 + 8])beta_i);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _beta_i =((double(*)[64 + 8][64 + 8])beta_i);

ConvertRoseBinaryOp()
_beta_i =((double(*)[64 + 8][64 + 8])beta_i)
op is =
LHS is _beta_i
RHS is ((double(*)[64 + 8][64 + 8])beta_i)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgCastExp
ConvertRoseCastExp()  casttype 2 = C Style    ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 31     _beta_j =((double(*)[64 + 8][64 + 8])beta_j);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _beta_j =((double(*)[64 + 8][64 + 8])beta_j);

ConvertRoseBinaryOp()
_beta_j =((double(*)[64 + 8][64 + 8])beta_j)
op is =
LHS is _beta_j
RHS is ((double(*)[64 + 8][64 + 8])beta_j)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgCastExp
ConvertRoseCastExp()  casttype 2 = C Style    ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 32     _beta_k =((double(*)[64 + 8][64 + 8])beta_k);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _beta_k =((double(*)[64 + 8][64 + 8])beta_k);

ConvertRoseBinaryOp()
_beta_k =((double(*)[64 + 8][64 + 8])beta_k)
op is =
LHS is _beta_k
RHS is ((double(*)[64 + 8][64 + 8])beta_k)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgCastExp
ConvertRoseCastExp()  casttype 2 = C Style    ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 33     _lambda =((double(*)[64 + 8][64 + 8])lambda);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _lambda =((double(*)[64 + 8][64 + 8])lambda);

ConvertRoseBinaryOp()
_lambda =((double(*)[64 + 8][64 + 8])lambda)
op is =
LHS is _lambda
RHS is ((double(*)[64 + 8][64 + 8])lambda)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgCastExp
ConvertRoseCastExp()  casttype 2 = C Style    ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 34     _temp =((double(*)[64 + 8][64 + 8])temp);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _temp =((double(*)[64 + 8][64 + 8])temp);

ConvertRoseBinaryOp()
_temp =((double(*)[64 + 8][64 + 8])temp)
op is =
LHS is _temp
RHS is ((double(*)[64 + 8][64 + 8])temp)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgCastExp
ConvertRoseCastExp()  casttype 2 = C Style    ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 35     K = box -> dim . k;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement K = box -> dim . k;

ConvertRoseBinaryOp()
K = box -> dim . k
op is =
LHS is K
RHS is box -> dim . k
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is box -> dim
RHS is k
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 36     J = box -> dim . j;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement J = box -> dim . j;

ConvertRoseBinaryOp()
J = box -> dim . j
op is =
LHS is J
RHS is box -> dim . j
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is box -> dim
RHS is j
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 37     I = box -> dim . i;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement I = box -> dim . i;

ConvertRoseBinaryOp()
I = box -> dim . i
op is =
LHS is I
RHS is box -> dim . i
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is box -> dim
RHS is i
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 38     int color;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  color
initname color
varname 'color'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'color' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int color;' with unique value (nil) from  SgInitializedName

hey! comments! on a VarDecl
1 preprocessing info

a comment  //  0=red, 1=black


statement 39     int ghostsToOperateOn = ghosts - 1;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  ghostsToOperateOn
initname ghostsToOperateOn
varname 'ghostsToOperateOn'
original vartype 0x6df041c0 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghostsToOperateOn' with unique value (nil)
ghostsToOperateOn gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
ghosts - 1
op is -
LHS is ghosts
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseVarDecl() storing variable declaration 'int ghostsToOperateOn = ghosts - 1;' with unique value (nil) from  SgInitializedName

statement 40     color = sweep;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement color = sweep;

ConvertRoseBinaryOp()
color = sweep
op is =
LHS is color
RHS is sweep
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 41     for(s = 0;s < ghosts;s++) {for(k = s - ghosts + 1;k < K +(ghosts - s - 1);k++) {for(j = s - ghosts + 1;j < J +(ghosts - s - 1);j++) {for(i = s - ghosts + 1;i < I +(ghosts - s - 1);i++) {if((i + j + k +(color + s)) % 2 == 0) {_temp[k][j][i] = b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]));_temp[k][j][i] = a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i];_phi[k][j][i] = _phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i]);}}}}}
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f8c0c69a290
for(s = 0;s < ghosts;s++) {for(k = s - ghosts + 1;k < K +(ghosts - s - 1);k++) {for(j = s - ghosts + 1;j < J +(ghosts - s - 1);j++) {for(i = s - ghosts + 1;i < I +(ghosts - s - 1);i++) {if((i + j + k +(color + s)) % 2 == 0) {_temp[k][j][i] = b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]));_temp[k][j][i] = a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i];_phi[k][j][i] = _phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i]);}}}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement s = 0;

ConvertRoseBinaryOp()
s = 0
op is =
LHS is s
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
s < ghosts
op is <
LHS is s
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f8c0c69a290
for(k = s - ghosts + 1;k < K +(ghosts - s - 1);k++) {for(j = s - ghosts + 1;j < J +(ghosts - s - 1);j++) {for(i = s - ghosts + 1;i < I +(ghosts - s - 1);i++) {if((i + j + k +(color + s)) % 2 == 0) {_temp[k][j][i] = b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]));_temp[k][j][i] = a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i];_phi[k][j][i] = _phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i]);}}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement k = s - ghosts + 1;

ConvertRoseBinaryOp()
k = s - ghosts + 1
op is =
LHS is k
RHS is s - ghosts + 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
s - ghosts + 1
op is +
LHS is s - ghosts
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
s - ghosts
op is -
LHS is s
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
k < K +(ghosts - s - 1)
op is <
LHS is k
RHS is K +(ghosts - s - 1)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
K +(ghosts - s - 1)
op is +
LHS is K
RHS is (ghosts - s - 1)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(ghosts - s - 1)
op is -
LHS is ghosts - s
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
ghosts - s
op is -
LHS is ghosts
RHS is s
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f8c0c69a290
for(j = s - ghosts + 1;j < J +(ghosts - s - 1);j++) {for(i = s - ghosts + 1;i < I +(ghosts - s - 1);i++) {if((i + j + k +(color + s)) % 2 == 0) {_temp[k][j][i] = b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]));_temp[k][j][i] = a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i];_phi[k][j][i] = _phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i]);}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = s - ghosts + 1;

ConvertRoseBinaryOp()
j = s - ghosts + 1
op is =
LHS is j
RHS is s - ghosts + 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
s - ghosts + 1
op is +
LHS is s - ghosts
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
s - ghosts
op is -
LHS is s
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < J +(ghosts - s - 1)
op is <
LHS is j
RHS is J +(ghosts - s - 1)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
J +(ghosts - s - 1)
op is +
LHS is J
RHS is (ghosts - s - 1)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(ghosts - s - 1)
op is -
LHS is ghosts - s
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
ghosts - s
op is -
LHS is ghosts
RHS is s
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f8c0c69a290
for(i = s - ghosts + 1;i < I +(ghosts - s - 1);i++) {if((i + j + k +(color + s)) % 2 == 0) {_temp[k][j][i] = b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]));_temp[k][j][i] = a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i];_phi[k][j][i] = _phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i]);}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = s - ghosts + 1;

ConvertRoseBinaryOp()
i = s - ghosts + 1
op is =
LHS is i
RHS is s - ghosts + 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
s - ghosts + 1
op is +
LHS is s - ghosts
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
s - ghosts
op is -
LHS is s
RHS is ghosts
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < I +(ghosts - s - 1)
op is <
LHS is i
RHS is I +(ghosts - s - 1)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
I +(ghosts - s - 1)
op is +
LHS is I
RHS is (ghosts - s - 1)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(ghosts - s - 1)
op is -
LHS is ghosts - s
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
ghosts - s
op is -
LHS is ghosts
RHS is s
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgIfStmt
if((i + j + k +(color + s)) % 2 == 0) {_temp[k][j][i] = b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]));_temp[k][j][i] = a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i];_phi[k][j][i] = _phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i]);}ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement (i + j + k +(color + s)) % 2 == 0;

ConvertRoseBinaryOp()
(i + j + k +(color + s)) % 2 == 0
op is ==
LHS is (i + j + k +(color + s)) % 2
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgModOp

ConvertRoseBinaryOp()
(i + j + k +(color + s)) % 2
op is %
LHS is (i + j + k +(color + s))
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(i + j + k +(color + s))
op is +
LHS is i + j + k
RHS is (color + s)
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + j + k
op is +
LHS is i + j
RHS is k
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + j
op is +
LHS is i
RHS is j
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(color + s)
op is +
LHS is color
RHS is s
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _temp[k][j][i] = b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]));

ConvertRoseBinaryOp()
_temp[k][j][i] = b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]))
op is =
LHS is _temp[k][j][i]
RHS is b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]))
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
b * h2inv *(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]))
op is *
LHS is b * h2inv
RHS is (_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]))
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
b * h2inv
op is *
LHS is b
RHS is h2inv
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i]) - _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i]))
op is -
LHS is _beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i])
RHS is _beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i]) + _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i])
op is +
LHS is _beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i])
RHS is _beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i]) - _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i])
op is -
LHS is _beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i])
RHS is _beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1]) + _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i])
op is +
LHS is _beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1])
RHS is _beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i]) - _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1])
op is -
LHS is _beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i])
RHS is _beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
_beta_i[k][j][i + 1] *(_phi[k][j][i + 1] - _phi[k][j][i])
op is *
LHS is _beta_i[k][j][i + 1]
RHS is (_phi[k][j][i + 1] - _phi[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_phi[k][j][i + 1] - _phi[k][j][i])
op is -
LHS is _phi[k][j][i + 1]
RHS is _phi[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
_beta_i[k][j][i] *(_phi[k][j][i] - _phi[k][j][i - 1])
op is *
LHS is _beta_i[k][j][i]
RHS is (_phi[k][j][i] - _phi[k][j][i - 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_phi[k][j][i] - _phi[k][j][i - 1])
op is -
LHS is _phi[k][j][i]
RHS is _phi[k][j][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
_beta_j[k][j + 1][i] *(_phi[k][j + 1][i] - _phi[k][j][i])
op is *
LHS is _beta_j[k][j + 1][i]
RHS is (_phi[k][j + 1][i] - _phi[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_phi[k][j + 1][i] - _phi[k][j][i])
op is -
LHS is _phi[k][j + 1][i]
RHS is _phi[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
_beta_j[k][j][i] *(_phi[k][j][i] - _phi[k][j - 1][i])
op is *
LHS is _beta_j[k][j][i]
RHS is (_phi[k][j][i] - _phi[k][j - 1][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_phi[k][j][i] - _phi[k][j - 1][i])
op is -
LHS is _phi[k][j][i]
RHS is _phi[k][j - 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
_beta_k[k + 1][j][i] *(_phi[k + 1][j][i] - _phi[k][j][i])
op is *
LHS is _beta_k[k + 1][j][i]
RHS is (_phi[k + 1][j][i] - _phi[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_phi[k + 1][j][i] - _phi[k][j][i])
op is -
LHS is _phi[k + 1][j][i]
RHS is _phi[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
_beta_k[k][j][i] *(_phi[k][j][i] - _phi[k - 1][j][i])
op is *
LHS is _beta_k[k][j][i]
RHS is (_phi[k][j][i] - _phi[k - 1][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_phi[k][j][i] - _phi[k - 1][j][i])
op is -
LHS is _phi[k][j][i]
RHS is _phi[k - 1][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _temp[k][j][i] = a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i];

ConvertRoseBinaryOp()
_temp[k][j][i] = a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i]
op is =
LHS is _temp[k][j][i]
RHS is a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
a * _alpha[k][j][i] * _phi[k][j][i] - _temp[k][j][i]
op is -
LHS is a * _alpha[k][j][i] * _phi[k][j][i]
RHS is _temp[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
a * _alpha[k][j][i] * _phi[k][j][i]
op is *
LHS is a * _alpha[k][j][i]
RHS is _phi[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
a * _alpha[k][j][i]
op is *
LHS is a
RHS is _alpha[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

hey! comments! on a BinaryOperator
1 preprocessing info

a comment  // helmholtz = a alphi I - helmholtz

ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _phi[k][j][i] = _phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i]);

ConvertRoseBinaryOp()
_phi[k][j][i] = _phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i])
op is =
LHS is _phi[k][j][i]
RHS is _phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
_phi[k][j][i] - _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i])
op is -
LHS is _phi[k][j][i]
RHS is _lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
_lambda[k][j][i] *(_temp[k][j][i] - _rhs[k][j][i])
op is *
LHS is _lambda[k][j][i]
RHS is (_temp[k][j][i] - _rhs[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_temp[k][j][i] - _rhs[k][j][i])
op is -
LHS is _temp[k][j][i]
RHS is _rhs[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

hey! comments! on a ForStmt
4 preprocessing info

a comment  //For the Red Pass

a comment  //laplacian where the output is into temp_1 , input in phi

a comment  //Perform the helmholtz on temp_1

a comment  //on appropiate red points only, perform the gsrb smooth and output to temp_phi


hey! comments! on a ForStmt
1 preprocessing info

a #define   #define ghostsToOperateOn (ghosts - s-2 )

top node 422/428    SgSymbolTable  (IGNORING)
unhandled top node 423/428 of type SgTypeTable
topnode 424 of 428, first == NULL??  blurb numeric_label
top node 425/428    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/smooth_fused_64.c  line 0   col 0
top node 426/428    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/smooth_fused_64.c  line 0   col 0
unhandled top node 427/428 of type SgSourceFile
(top)node has 4 children
node of type SourceFile is recursing to child 0 of type TypedefDecl
(top)node has 0 children
node of type SourceFile is recursing to child 1 of type FunctionDecl
child 1 is functiondecl destroy_box
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 2 of type FunctionDecl
child 2 is functiondecl create_box
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 3 of type FunctionDecl
child 3 is functiondecl main

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillCode::MergeNeighboringControlStructures  1 controls
control 0 is IR_CONTROL_LOOP

Loop::Loop(const IR_Control *control)
control type is 3   IR_CONTROL_BLOCK
2set last_compute_cg_ = NULL; 
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillIf::IR_chillIf( ir, chillast_IfStmt )
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_IF
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts

                                                  Loop::init_loop()
extract_ir_stmts()
ir_tree has 1 statements
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_IF( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
nesting level stmt size = 1
1 statements?
i 0
stmt_nesting_level[0] = 4
in init_loop, made 1 stmts
max nesting level 4 at location 0
loop.cc L356  n_dim now max_nesting_level 4
itn = stmt[0]
parent
parent
IR_CONTROL_LOOP  cur_dim 3
making CHILL scalar symbol i
index[3] = 'i'
parent
IR_CONTROL_LOOP  cur_dim 2
making CHILL scalar symbol j
index[2] = 'j'
parent
IR_CONTROL_LOOP  cur_dim 1
making CHILL scalar symbol k
index[1] = 'k'
parent
IR_CONTROL_LOOP  cur_dim 0
making CHILL scalar symbol s
index[0] = 's'
align loops by names,

set relation variable names                      ****
Relation r(4)
extract information from loop/if structures
IR_CONTROL_IF
IR_chillCode::QueryExpOperation()
IR_OP_MOD
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym color ) *****

making CHILL scalar symbol color
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym ghosts ) *****

making CHILL scalar symbol ghosts
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym I ) *****

making CHILL scalar symbol I
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym ghosts ) *****

making CHILL scalar symbol ghosts
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym ghosts ) *****

making CHILL scalar symbol ghosts
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym J ) *****

making CHILL scalar symbol J
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym ghosts ) *****

making CHILL scalar symbol ghosts
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym ghosts ) *****

making CHILL scalar symbol ghosts
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym K ) *****

making CHILL scalar symbol K
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym ghosts ) *****

making CHILL scalar symbol ghosts
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym ghosts ) *****

making CHILL scalar symbol ghosts
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[0].loop_level has size n_dim 4
for int i < n_dim(4)
whew
                                        loop.cc   Loop::init_loop() END

after init_loop, 5 freevar
loop.cc after init_loop, 1 statements
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 35
k1 0
k1 1
k1 2
k1 3
k1 4
k1 5
k1 6
k1 7
k1 8
k1 9
k1 10
k1 11
k1 12
k1 13
k1 14
k1 15
k1 16
k1 17
k1 18
k1 19
k1 20
k1 21
k1 22
k1 23
k1 24
k1 25
k1 26
k1 27
k1 28
k1 29
k1 30
k1 31
k1 32
k1 33
k1 34
k2 0
k2 1
k2 2
k2 3
k2 4
k2 5
k2 6
k2 7
k2 8
k2 9
k2 10
k2 11
k2 12
k2 13
k2 14
k2 15
k2 16
k2 17
k2 18


*** LOTS OF REDUCTIONS ***


i range 1
i 0
dep.hasEdge(0, 0)
tdv size 54
ij 0 0
ij 0 1
ij 0 2
ij 0 3
ij 0 4
ij 0 5
ij 0 6
ij 0 7
ij 0 8
ij 0 9
ij 0 10
ij 0 11
ij 0 12
ij 0 13
ij 0 14
ij 0 15
ij 0 16
ij 0 17
ij 0 18
ij 0 19
ij 0 20
ij 0 21
ij 0 22
ij 0 23
ij 0 24
ij 0 25
ij 0 26
ij 0 27
ij 0 28
ij 0 29
ij 0 30
ij 0 31
ij 0 32
ij 0 33
ij 0 34
ij 0 35
ij 0 36
ij 0 37
ij 0 38
ij 0 39
ij 0 40
ij 0 41
ij 0 42
ij 0 43
ij 0 44
ij 0 45
ij 0 46
ij 0 47
ij 0 48
ij 0 49
ij 0 50
ij 0 51
ij 0 52
ij 0 53
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames

loop.cc Loop::printCode(  effort 3 )
Loop::printCode(), last_compute_cg_ == NULL
leaving Loop::printCode()
BIG IF
fail 0
big if true
CUDACHILL IS NOT DEFINED
calling ROSE code gen?    loop num 0 - 0

loop.cc Loop::getCode(  effort 3 )
Loop::getCode() last_compute_cg_ NOT NULL
1 stmts
calling last_compute_cgr_->printRepr()
t2 was already defined in the function body
t2 was already defined in the function body
t2 was already defined in the function body
t4 was already defined in the function body
t2 was already defined in the function body
t2 was already defined in the function body
t6 was already defined in the function body
t6 was already defined in the function body
t4 was already defined in the function body
t2 was already defined in the function body
t2 was already defined in the function body
t2 was already defined in the function body
t8 was already defined in the function body
t2 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body

loop.cc Loop::getCode( effort 3 )   DONE
IR_chillCode::ReplaceCode( old, *repr)
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(IfStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
printing as part of the destructor
(FunctionDecl) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CStyleCastExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CStyleCastExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CStyleCastExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CStyleCastExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CStyleCastExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CStyleCastExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CStyleCastExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CStyleCastExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(MemberExpr) forgot to implement gatherVarUsage()
(MemberExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(MemberExpr) forgot to implement gatherVarUsage()
(MemberExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(MemberExpr) forgot to implement gatherVarUsage()
(MemberExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CStyleCastExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
