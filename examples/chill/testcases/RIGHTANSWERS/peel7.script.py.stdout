Unhandled case in scanner: SourceFile
Looking for def float
Looking for def float
Looking for def float
Looking for def int
Looking for def int
Looking for def int
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: FloatingLiteral
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: SourceFile
Unhandled case in scanner: FunctionDecl
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: VarDecl
Unhandled case in scanner: VarDecl
Unhandled case in scanner: VarDecl
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: FloatingLiteral
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Relation r   {[i,j,n] : TRUE }
Relation r   {[i,j,n] : TRUE }
s1: (dim:0) (dim:1) (dim:2) 
s2: (dim:0) (dim:1) (dim:2) 
{[i,j,n] -> [chill_t1,chill_t2,chill_t3] : i = chill_t1 && j = chill_t2 && n = chill_t3 }
{[i,j,n] -> [chill_t1,chill_t2,chill_t3] : i = chill_t1 && j = chill_t2 && n = chill_t3 }
{[chill_t1,chill_t2,chill_t3] -> [chill_t4,chill_t5,chill_t6] : chill_t1 = chill_t4 && chill_t2 = chill_t5 && chill_t3 = chill_t6 }
{[chill_t1,chill_t2,chill_t3] -> [chill_t4,chill_t5,chill_t6] : chill_t1 = chill_t4 && chill_t2 = chill_t5 && chill_t3 = chill_t6 }
{[chill_t4,chill_t5,chill_t6] -> [chill_t7,chill_t8,chill_t9] : chill_t4 = chill_t7 && chill_t5 = chill_t8 && chill_t6 = chill_t9 }
{[chill_t4,chill_t5,chill_t6] -> [chill_t7,chill_t8,chill_t9] : chill_t4 = chill_t7 && chill_t5 = chill_t8 && chill_t6 = chill_t9 }
{[chill_t7,chill_t8,chill_t9] -> [chill_t10,chill_t11,chill_t12] : chill_t7 = chill_t10 && chill_t8 = chill_t11 && chill_t9 = chill_t12 }
{[chill_t7,chill_t8,chill_t9] -> [chill_t10,chill_t11,chill_t12] : chill_t7 = chill_t10 && chill_t8 = chill_t11 && chill_t9 = chill_t12 }

xforms:
{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : In_1 = Out_2 && In_2 = Out_4 && In_3 = Out_6 && Out_1 = 0 && Out_3 = 0 && Out_5 = 0 && Out_7 = 0 }

{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : In_1 = Out_2 && In_2 = Out_4 && In_3 = Out_6 && Out_1 = 0 && Out_3 = 0 && Out_5 = 0 && Out_7 = 0 }

{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : exists ( alpha,beta,gamma,delta,tau,sigma,chi : ( alpha = Out_1 && beta = Out_2 && delta = Out_4 && tau = Out_5 && sigma = Out_6 && Out_7 = chi && 4+Out_3 = 0 && 3+gamma = 0 && In_1 = beta && delta = In_2 && tau = 0 && sigma = In_3 && chi = 0 && alpha = 0 )) }

{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : exists ( alpha,beta,gamma,delta,tau,sigma,chi : ( alpha = Out_1 && beta = Out_2 && delta = Out_4 && tau = Out_5 && sigma = Out_6 && Out_7 = chi && 4+Out_3 = 0 && 3+gamma = 0 && In_1 = beta && delta = In_2 && tau = 0 && sigma = In_3 && chi = 0 && alpha = 0 )) }

{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : exists ( alpha,beta,gamma,delta,tau,sigma,chi : ( alpha = Out_1 && beta = Out_2 && delta = Out_4 && tau = Out_5 && sigma = Out_6 && Out_7 = chi && 3+Out_3 = 0 && 2+gamma = 0 && In_1 = beta && delta = In_2 && tau = 0 && sigma = In_3 && chi = 0 && alpha = 0 )) }

{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : exists ( alpha,beta,gamma,delta,tau,sigma,chi : ( alpha = Out_1 && beta = Out_2 && delta = Out_4 && tau = Out_5 && sigma = Out_6 && Out_7 = chi && 3+Out_3 = 0 && 2+gamma = 0 && In_1 = beta && delta = In_2 && tau = 0 && sigma = In_3 && chi = 0 && alpha = 0 )) }

{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : exists ( alpha,beta,gamma,delta,tau,sigma,chi : ( alpha = Out_1 && beta = Out_2 && delta = Out_4 && tau = Out_5 && sigma = Out_6 && Out_7 = chi && 2+Out_3 = 0 && 1+gamma = 0 && In_1 = beta && delta = In_2 && tau = 0 && sigma = In_3 && chi = 0 && alpha = 0 )) }

{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : exists ( alpha,beta,gamma,delta,tau,sigma,chi : ( alpha = Out_1 && beta = Out_2 && delta = Out_4 && tau = Out_5 && sigma = Out_6 && Out_7 = chi && 2+Out_3 = 0 && 1+gamma = 0 && In_1 = beta && delta = In_2 && tau = 0 && sigma = In_3 && chi = 0 && alpha = 0 )) }

{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : exists ( alpha,beta,gamma,delta,tau,sigma,chi : ( alpha = Out_1 && beta = Out_2 && delta = Out_4 && tau = Out_5 && sigma = Out_6 && Out_7 = chi && 1+Out_3 = 0 && In_1 = beta && In_2 = delta && In_3 = sigma && alpha = 0 && gamma = 0 && tau = 0 && chi = 0 )) }

{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : exists ( alpha,beta,gamma,delta,tau,sigma,chi : ( alpha = Out_1 && beta = Out_2 && delta = Out_4 && tau = Out_5 && sigma = Out_6 && Out_7 = chi && 1+Out_3 = 0 && In_1 = beta && In_2 = delta && In_3 = sigma && alpha = 0 && gamma = 0 && tau = 0 && chi = 0 )) }


IS:
{[chill_t10,chill_t11,chill_t12] : chill_t12 = 0 && 0 <= chill_t10 <= 7 && 3 <= chill_t11 <= 15 and 4 <= chill_t11 }

{[chill_t10,chill_t11,chill_t12] : 0 <= chill_t10 <= 7 && 0 <= chill_t12 <= 31 && 3 <= chill_t11 <= 15 and 4 <= chill_t11 }

{[chill_t1,chill_t2,chill_t3] : chill_t3 = 0 && 0 <= chill_t1 <= 7 && 0 <= chill_t2 <= 15 and  not ( 1 <= chill_t2 ) }

{[chill_t1,chill_t2,chill_t3] : 0 <= chill_t1 <= 7 && 0 <= chill_t3 <= 31 && 0 <= chill_t2 <= 15 and  not ( 1 <= chill_t2 ) }

{[chill_t4,chill_t5,chill_t6] : chill_t6 = 0 && 0 <= chill_t4 <= 7 && 1 <= chill_t5 <= 15 and  not ( 2 <= chill_t5 ) }

{[chill_t4,chill_t5,chill_t6] : 0 <= chill_t4 <= 7 && 0 <= chill_t6 <= 31 && 1 <= chill_t5 <= 15 and  not ( 2 <= chill_t5 ) }

{[chill_t7,chill_t8,chill_t9] : chill_t9 = 0 && 0 <= chill_t7 <= 7 && 2 <= chill_t8 <= 15 and  not ( 3 <= chill_t8 ) }

{[chill_t7,chill_t8,chill_t9] : 0 <= chill_t7 <= 7 && 0 <= chill_t9 <= 31 && 2 <= chill_t8 <= 15 and  not ( 3 <= chill_t8 ) }

{[chill_t10,chill_t11,chill_t12] : chill_t12 = 0 && 0 <= chill_t10 <= 7 && 3 <= chill_t11 <= 15 and  not ( 4 <= chill_t11 ) }

{[chill_t10,chill_t11,chill_t12] : 0 <= chill_t10 <= 7 && 0 <= chill_t12 <= 31 && 3 <= chill_t11 <= 15 and  not ( 4 <= chill_t11 ) }


known:
{[In_1,In_2,In_3,In_4,In_5,In_6,In_7] : TRUE }


