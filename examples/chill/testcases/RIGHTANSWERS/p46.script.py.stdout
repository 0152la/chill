Unhandled case in scanner: SourceFile
Looking for def int
Looking for def int
Looking for def int
Looking for def float
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: CStyleCastExpr
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: ReturnStmt
Unhandled case in scanner: CallExpr
Unhandled case in scanner: ReturnStmt
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: SourceFile
Unhandled case in scanner: FunctionDecl
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: VarDecl
Unhandled case in scanner: VarDecl
Unhandled case in scanner: VarDecl
Unhandled case in scanner: VarDecl
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: ForStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: UnaryOperator
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: BinaryOperator
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: ArraySubscriptExpr
Unhandled case in scanner: CStyleCastExpr
Unhandled case in scanner: IntegerLiteral
Unhandled case in scanner: ReturnStmt
Unhandled case in scanner: FunctionDecl
Unhandled case in scanner: CompoundStmt
Unhandled case in scanner: CallExpr
Unhandled case in scanner: ReturnStmt
Unhandled case in scanner: IntegerLiteral
Relation r   {[I,J,K] : TRUE }
s1: (dim:0) (dim:1) (dim:2) 
dependence graph:
0->0: A:flow(1, 0, -1)

xforms:
{[In_1,In_2,In_3] -> [Out_1,Out_2,Out_3,Out_4,Out_5,Out_6,Out_7] : Out_7 = 0 && Out_2 = In_1 && Out_3 = 0 && In_2 = Out_4 && Out_5 = 0 && In_3 = Out_6 && Out_1 = 0 }


IS:
{[I,J,K] : 1 <= K <= 25 && 1 <= J <= 20 && 1 <= I <= 16 }


known:
{[In_1,In_2,In_3,In_4,In_5,In_6,In_7] : TRUE }


