Omega initialized
in C, initchill() to set up C methods to be called from python
"/home/derick/dev/chill/chill-src/examples/chill/testcases/AKp257.c", line 8: warning: 
          variable "j" was declared but never referenced
     int i,j ;
           ^

ConvertRoseFile(  SgGlobal *sg, filename AKp257.c );
TOPMOST located node
sourcefile is '/home/derick/dev/chill/chill-src/examples/chill/testcases/AKp257.c'
425 top nodes

functiondecl                     foo blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/AKp257.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/AKp257.c
SAME FILE

ConvertRoseFunctionDecl( foo )

hey! comments! on a FunctionDecl
3 preprocessing info

a #define #define N 64

a comment  // SIMPLE EXAMPLE FROM Allen/Kennedy page 257    SHOULD FAIL

a comment  // because fusing will change the meaning of the code



***  ConvertRoseInitName()  a
initname a
varname 'a'
original vartype 0x1907a7b0 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'a' with unique value (nil)
new parameter:
foo chillAST_FunctionDecl::addParameter( 0x23acba0  param a)   total of 1 parameters


***  ConvertRoseInitName()  b
initname b
varname 'b'
original vartype 0x1907a7b0 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'b' with unique value (nil)
new parameter:
foo chillAST_FunctionDecl::addParameter( 0x237c440  param b)   total of 2 parameters


***  ConvertRoseInitName()  c
initname c
varname 'c'
original vartype 0x1907a7b0 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'c' with unique value (nil)
new parameter:
foo chillAST_FunctionDecl::addParameter( 0x237b320  param c)   total of 3 parameters


***  ConvertRoseInitName()  d
initname d
varname 'd'
original vartype 0x1907a7b0 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'd' with unique value (nil)
new parameter:
foo chillAST_FunctionDecl::addParameter( 0x240f580  param d)   total of 4 parameters


***  ConvertRoseInitName()  e
initname e
varname 'e'
original vartype 0x1907a7b0 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'e' with unique value (nil)
new parameter:
foo chillAST_FunctionDecl::addParameter( 0x2410d30  param e)   total of 5 parameters
got body
5 statements in FunctionDecl body
chillCS is 0x22dc9b0

statement 0     int i;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  i
initname i
varname 'i'
original vartype 0x1907a690 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

statement 1     int j;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  j
initname j
varname 'j'
original vartype 0x1907a690 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

statement 2     for(i = 0;i < 64;i++) {a[i] = b[i] + c;}
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f1e9820d290
for(i = 0;i < 64;i++) {a[i] = b[i] + c;}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 64
op is <
LHS is i
RHS is 64
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement a[i] = b[i] + c;

ConvertRoseBinaryOp()
a[i] = b[i] + c
op is =
LHS is a[i]
RHS is b[i] + c
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
b[i] + c
op is +
LHS is b[i]
RHS is c
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

hey! comments! on a ForStmt
1 preprocessing info

a comment  // 2 loops with identical iterations 


statement 3     for(i = 0;i < 64;i++) {d[i] = a[i + 1] + e;}
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f1e9820d290
for(i = 0;i < 64;i++) {d[i] = a[i + 1] + e;}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 64
op is <
LHS is i
RHS is 64
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement d[i] = a[i + 1] + e;

ConvertRoseBinaryOp()
d[i] = a[i + 1] + e
op is =
LHS is d[i]
RHS is a[i + 1] + e
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
a[i + 1] + e
op is +
LHS is a[i + 1]
RHS is e
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 4     return ;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgReturnStmt
ConvertRoseReturnStmt() parent 0x7f1e9820d290
ConvertRoseGenericAST(),  rose AST node of type SgNullExpression
top node 419/425    SgSymbolTable  (IGNORING)
unhandled top node 420/425 of type SgTypeTable
topnode 421 of 425, first == NULL??  blurb numeric_label
top node 422/425    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/AKp257.c  line 0   col 0
top node 423/425    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/AKp257.c  line 0   col 0
unhandled top node 424/425 of type SgSourceFile
(top)node has 1 children
node of type SourceFile is recursing to child 0 of type FunctionDecl
child 0 is functiondecl foo

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillCode::MergeNeighboringControlStructures  2 controls
control 0 is IR_CONTROL_LOOP
control 1 is IR_CONTROL_LOOP

Loop::Loop(const IR_Control *control)
control type is 3   IR_CONTROL_BLOCK
2set last_compute_cg_ = NULL; 
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  2 controls
controls.size() == 2  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[1] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 2 parts

                                                  Loop::init_loop()
extract_ir_stmts()
ir_tree has 2 statements
extract_ir_stmts()   ir_tree.size() 2
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
nesting level stmt size = 2
2 statements?
i 0
stmt_nesting_level[0] = 1
i 1
stmt_nesting_level[1] = 1
in init_loop, made 2 stmts
max nesting level 1 at location 0
loop.cc L356  n_dim now max_nesting_level 1
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 0
making CHILL scalar symbol i
index[0] = 'i'
align loops by names,

set relation variable names                      ****
Relation r(1)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[0].loop_level has size n_dim 1
for int i < n_dim(1)
whew
max nesting level 1 at location 1
align loops by names,
making CHILL scalar symbol i

set relation variable names                      ****
Relation r(1)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[1].loop_level has size n_dim 1
for int i < n_dim(1)
whew
                                        loop.cc   Loop::init_loop() END

after init_loop, 0 freevar
loop.cc after init_loop, 2 statements
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
dv.first.size() 0
k2 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0


*** LOTS OF REDUCTIONS ***


i range 2
i 0
i 1
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
LEAVING Loop::setLexicalOrder()  0 idxNames
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 1
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
loop.cc apply_xform( set )
loop vars 0 i
2 uninterpreted symbols
loop vars 0 i
loop.cc stmt[*i].code =
loop vars 0 i
chill_t1 was already defined in the function body
2 uninterpreted symbols
loop vars 0 i
loop.cc stmt[*i].code =
loop.cc LEAVING apply_xform( set )

terminate called after throwing an instance of 'loop_error'
  what():  loop error: statements 0 and 1 cannot be fused together due to negative dependence
Aborted (core dumped)
