Omega initialized
in C, initchill() to set up C methods to be called from python
"/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c", line 24: warning: 
          variable "ii" was declared but never referenced
  	int ii,jj,kk;
  	    ^

"/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c", line 24: warning: 
          variable "jj" was declared but never referenced
  	int ii,jj,kk;
  	       ^

"/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c", line 24: warning: 
          variable "kk" was declared but never referenced
  	int ii,jj,kk;
  	          ^

"/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c", line 33: warning: 
          variable "pencil" was declared but never referenced
  	int pencil = domain->subdomains[box].levels[level].pencil;
  	    ^

"/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c", line 34: warning: 
          variable "plane" was declared but never referenced
  	int  plane = domain->subdomains[box].levels[level].plane;
  	     ^

"/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c", line 35: warning: 
          variable "ghosts" was declared but never referenced
  	int ghosts = domain->subdomains[box].levels[level].ghosts;
  	    ^

"/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c", line 36: warning: 
          variable "dim_k" was declared but never referenced
  	int  dim_k = domain->subdomains[box].levels[level].dim.k;
  	     ^

"/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c", line 37: warning: 
          variable "dim_j" was declared but never referenced
  	int  dim_j = domain->subdomains[box].levels[level].dim.j;
  	     ^

"/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c", line 38: warning: 
          variable "dim_i" was declared but never referenced
  	int  dim_i = domain->subdomains[box].levels[level].dim.i;
  	     ^

ConvertRoseFile(  SgGlobal *sg, filename jacobi_box_1_32.c );
TOPMOST located node
sourcefile is '/home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c'
439 top nodes

TYPEDEF



418   0x7fcef27b0010   declarations    node SgTypedefDeclaration
typedef gonna be a struct
that's all

ConvertRoseStructDeclaration( CLASSDEC )
struct name is 'boxdoth'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::low
initname boxdoth::low
varname 'low'
original vartype 0x131b580 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'low' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x1517d70'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1517d70::i
initname __anonymous_0x1517d70::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1517d70::j
initname __anonymous_0x1517d70::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1517d70::k
initname __anonymous_0x1517d70::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting low uniquePtr to 0x7fcef2954a00 the SgVariableDeclaration that defined it?
STORING vardecl low in global VariableDeclarations 4
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}low;' with unique value 0x7fcef2954a00 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::dim
initname boxdoth::dim
varname 'dim'
original vartype 0x131b600 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'dim' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x1518880'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1518880::i
initname __anonymous_0x1518880::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1518880::j
initname __anonymous_0x1518880::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1518880::k
initname __anonymous_0x1518880::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting dim uniquePtr to 0x7fcef2955740 the SgVariableDeclaration that defined it?
STORING vardecl dim in global VariableDeclarations 8
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}dim;' with unique value 0x7fcef2955740 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::dim_with_ghosts
initname boxdoth::dim_with_ghosts
varname 'dim_with_ghosts'
original vartype 0x131da50 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_with_ghosts' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x151a600'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151a600::i
initname __anonymous_0x151a600::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151a600::j
initname __anonymous_0x151a600::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151a600::k
initname __anonymous_0x151a600::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
struct __anonymous_0x151a600 {
  int i;
  int j;
  int k;
}we know what the struct definition looks like because it was part of this vardecl
dammit setting dim_with_ghosts uniquePtr to 0x7fcef2956480 the SgVariableDeclaration that defined it?
STORING vardecl dim_with_ghosts in global VariableDeclarations 12
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}dim_with_ghosts;' with unique value 0x7fcef2956480 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::ghosts
initname boxdoth::ghosts
varname 'ghosts'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int ghosts;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::pencil
initname boxdoth::pencil
varname 'pencil'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'pencil' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int pencil;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::plane
initname boxdoth::plane
varname 'plane'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'plane' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int plane;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::volume
initname boxdoth::volume
varname 'volume'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'volume' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int volume;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::bufsizes
initname boxdoth::bufsizes
varname 'bufsizes'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'bufsizes' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int bufsizes[27];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::surface_bufs
initname boxdoth::surface_bufs
varname 'surface_bufs'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x131e2d0 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'surface_bufs' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ surface_bufs[27];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::ghost_bufs
initname boxdoth::ghost_bufs
varname 'ghost_bufs'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x131e2d0 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'ghost_bufs' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ ghost_bufs[27];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::numGrids
initname boxdoth::numGrids
varname 'numGrids'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int numGrids;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  boxdoth::grids
initname boxdoth::grids
varname 'grids'
original vartype 0x151f480 'double ** __restrict__'
HACK vartype double arraypart **
ConvertRoseInitName()  storing variable declaration 'grids' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double ** __restrict__ grids;' with unique value (nil) from  SgInitializedName
now have recorddecl

functiondecl                     destroy_box blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/box.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( destroy_box )


***  ConvertRoseInitName()  box
initname box
varname 'box'
original vartype 0x2c526e60 'box_type'
HACK vartype box_type arraypart 
ConvertRoseInitName()  storing variable declaration 'box' with unique value (nil)
new parameter:
destroy_box chillAST_FunctionDecl::addParameter( 0x131a9e0  param box)   total of 1 parameters

functiondecl                     create_box blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/box.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( create_box )


***  ConvertRoseInitName()  box
initname box
varname 'box'
original vartype 0x2c526e60 'box_type'
HACK vartype box_type arraypart 
ConvertRoseInitName()  storing variable declaration 'box' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x131b360  param box)   total of 1 parameters


***  ConvertRoseInitName()  numGrids
initname numGrids
varname 'numGrids'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x151fda0  param numGrids)   total of 2 parameters


***  ConvertRoseInitName()  low_i
initname low_i
varname 'low_i'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'low_i' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x151ff80  param low_i)   total of 3 parameters


***  ConvertRoseInitName()  low_j
initname low_j
varname 'low_j'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'low_j' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1520140  param low_j)   total of 4 parameters


***  ConvertRoseInitName()  low_k
initname low_k
varname 'low_k'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'low_k' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1520320  param low_k)   total of 5 parameters


***  ConvertRoseInitName()  dim_i
initname dim_i
varname 'dim_i'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_i' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1520550  param dim_i)   total of 6 parameters


***  ConvertRoseInitName()  dim_j
initname dim_j
varname 'dim_j'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_j' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1520730  param dim_j)   total of 7 parameters


***  ConvertRoseInitName()  dim_k
initname dim_k
varname 'dim_k'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_k' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1520910  param dim_k)   total of 8 parameters


***  ConvertRoseInitName()  ghosts
initname ghosts
varname 'ghosts'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
new parameter:
create_box chillAST_FunctionDecl::addParameter( 0x1520af0  param ghosts)   total of 9 parameters

TYPEDEF



421   0x7fcef27b0358   declarations    node SgTypedefDeclaration
typedef gonna be a struct
that's all

ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x151f400'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151f400::isFace
initname __anonymous_0x151f400::isFace
varname 'isFace'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'isFace' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int isFace;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151f400::isEdge
initname __anonymous_0x151f400::isEdge
varname 'isEdge'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'isEdge' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int isEdge;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151f400::isCorner
initname __anonymous_0x151f400::isCorner
varname 'isCorner'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'isCorner' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int isCorner;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151f400::dim
initname __anonymous_0x151f400::dim
varname 'dim'
original vartype 0x1521a70 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'dim' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x151fc40'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151fc40::i
initname __anonymous_0x151fc40::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151fc40::j
initname __anonymous_0x151fc40::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151fc40::k
initname __anonymous_0x151fc40::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
struct __anonymous_0x151fc40 {
  int i;
  int j;
  int k;
}we know what the struct definition looks like because it was part of this vardecl
dammit setting dim uniquePtr to 0x7fcef2959980 the SgVariableDeclaration that defined it?
STORING vardecl dim in global VariableDeclarations 38
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}dim;' with unique value 0x7fcef2959980 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151f400::read
initname __anonymous_0x151f400::read
varname 'read'
original vartype 0x131a810 'struct {int box;int i;int j;int k;int pencil;int plane;double * __restrict__ ptr;}'
HACK vartype struct {int box;int i;int j;int k;int pencil;int plane;double * ptr;} arraypart *
ConvertRoseInitName()  storing variable declaration 'read' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x15206b0'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15206b0::box
initname __anonymous_0x15206b0::box
varname 'box'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'box' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int box;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15206b0::i
initname __anonymous_0x15206b0::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15206b0::j
initname __anonymous_0x15206b0::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15206b0::k
initname __anonymous_0x15206b0::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15206b0::pencil
initname __anonymous_0x15206b0::pencil
varname 'pencil'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'pencil' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int pencil;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15206b0::plane
initname __anonymous_0x15206b0::plane
varname 'plane'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'plane' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int plane;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15206b0::ptr
initname __anonymous_0x15206b0::ptr
varname 'ptr'
original vartype 0x1522c40 'double * __restrict__'
HACK vartype double arraypart *
ConvertRoseInitName()  storing variable declaration 'ptr' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double * __restrict__ ptr;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting read uniquePtr to 0x7fcef295b400 the SgVariableDeclaration that defined it?
STORING vardecl read in global VariableDeclarations 46
ConvertRoseVarDecl() storing variable declaration 'struct __anonymous_0x15206b0 {int box;int i;int j;int k;int pencil;int plane;double * __restrict__ ptr;}read;' with unique value 0x7fcef295b400 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x151f400::write
initname __anonymous_0x151f400::write
varname 'write'
original vartype 0x131a810 'struct {int box;int i;int j;int k;int pencil;int plane;double * __restrict__ ptr;}'
HACK vartype struct {int box;int i;int j;int k;int pencil;int plane;double * ptr;} arraypart *
ConvertRoseInitName()  storing variable declaration 'write' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'struct __anonymous_0x15206b0 write;' with unique value (nil) from  SgInitializedName
now have recorddecl

TYPEDEF



422   0x7fcef27b06a0   declarations    node SgTypedefDeclaration
typedef gonna be a struct
that's all

ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x1521c20'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1521c20::rank
initname __anonymous_0x1521c20::rank
varname 'rank'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'rank' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int rank;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1521c20::local_index
initname __anonymous_0x1521c20::local_index
varname 'local_index'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'local_index' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int local_index;' with unique value (nil) from  SgInitializedName
now have recorddecl

TYPEDEF



423   0x7fcef27b09e8   declarations    node SgTypedefDeclaration
typedef gonna be a struct
that's all

ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x15225b0'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15225b0::low
initname __anonymous_0x15225b0::low
varname 'low'
original vartype 0x15244e0 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'low' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x1522940'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1522940::i
initname __anonymous_0x1522940::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1522940::j
initname __anonymous_0x1522940::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1522940::k
initname __anonymous_0x1522940::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting low uniquePtr to 0x7fcef295cb30 the SgVariableDeclaration that defined it?
STORING vardecl low in global VariableDeclarations 53
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}low;' with unique value 0x7fcef295cb30 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15225b0::dim
initname __anonymous_0x15225b0::dim
varname 'dim'
original vartype 0x15254e0 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'dim' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x15233b0'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15233b0::i
initname __anonymous_0x15233b0::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15233b0::j
initname __anonymous_0x15233b0::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15233b0::k
initname __anonymous_0x15233b0::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
struct __anonymous_0x15233b0 {
  int i;
  int j;
  int k;
}we know what the struct definition looks like because it was part of this vardecl
dammit setting dim uniquePtr to 0x7fcef295d870 the SgVariableDeclaration that defined it?
STORING vardecl dim in global VariableDeclarations 57
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}dim;' with unique value 0x7fcef295d870 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15225b0::numLevels
initname __anonymous_0x15225b0::numLevels
varname 'numLevels'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numLevels' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int numLevels;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15225b0::ghosts
initname __anonymous_0x15225b0::ghosts
varname 'ghosts'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int ghosts;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15225b0::neighbors
initname __anonymous_0x15225b0::neighbors
varname 'neighbors'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526c70 'neighbor_type'
HACK vartype neighbor_type arraypart 
ConvertRoseInitName()  storing variable declaration 'neighbors' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'neighbor_type neighbors[27];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15225b0::levels
initname __anonymous_0x15225b0::levels
varname 'levels'
original vartype 0x2c526c70 'box_type'
HACK vartype box_type arraypart 
ConvertRoseInitName()  storing variable declaration 'levels' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'box_type *levels;' with unique value (nil) from  SgInitializedName
now have recorddecl

TYPEDEF



424   0x7fcef27b0d30   declarations    node SgTypedefDeclaration
typedef gonna be a struct
that's all

ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x15249e0'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::cycles
initname __anonymous_0x15249e0::cycles
varname 'cycles'
original vartype 0x1527130 'struct {unsigned int smooth[10];unsigned int apply_op[10];unsigned int residual[10];unsigned int restriction[10];unsigned int interpolation[10];unsigned int communication[10];unsigned int pack[10];unsigned int grid2grid[10];unsigned int unpack[10];unsigned int recv[10];unsigned int send[10];unsigned int wait[10];unsigned int blas1[10];unsigned int blas3[10];unsigned int collectives[10];unsigned int Total[10];unsigned int build;unsigned int vcycles;unsigned int MGSolve;}'
HACK vartype struct {unsigned int smooth[10];unsigned int apply_op[10];unsigned int residual[10];unsigned int restriction[10];unsigned int interpolation[10];unsigned int communication[10];unsigned int pack[10];unsigned int grid2grid[10];unsigned int unpack[10];unsigned int recv[10];unsigned int send[10];unsigned int wait[10];unsigned int blas1[10];unsigned int blas3[10];unsigned int collectives[10];unsigned int Total[10];unsigned int build;unsigned int vcycles;unsigned int MGSolve;} arraypart [10][10][10][10][10][10][10][10][10][10][10][10][10][10][10][10]
ConvertRoseInitName()  storing variable declaration 'cycles' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x1524d70'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::smooth
initname __anonymous_0x1524d70::smooth
varname 'smooth'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'smooth' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int smooth[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::apply_op
initname __anonymous_0x1524d70::apply_op
varname 'apply_op'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'apply_op' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int apply_op[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::residual
initname __anonymous_0x1524d70::residual
varname 'residual'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'residual' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int residual[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::restriction
initname __anonymous_0x1524d70::restriction
varname 'restriction'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'restriction' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int restriction[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::interpolation
initname __anonymous_0x1524d70::interpolation
varname 'interpolation'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'interpolation' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int interpolation[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::communication
initname __anonymous_0x1524d70::communication
varname 'communication'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'communication' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int communication[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::pack
initname __anonymous_0x1524d70::pack
varname 'pack'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'pack' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int pack[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::grid2grid
initname __anonymous_0x1524d70::grid2grid
varname 'grid2grid'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'grid2grid' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int grid2grid[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::unpack
initname __anonymous_0x1524d70::unpack
varname 'unpack'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'unpack' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int unpack[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::recv
initname __anonymous_0x1524d70::recv
varname 'recv'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'recv' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int recv[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::send
initname __anonymous_0x1524d70::send
varname 'send'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'send' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int send[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::wait
initname __anonymous_0x1524d70::wait
varname 'wait'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'wait' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int wait[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::blas1
initname __anonymous_0x1524d70::blas1
varname 'blas1'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'blas1' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int blas1[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::blas3
initname __anonymous_0x1524d70::blas3
varname 'blas3'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'blas3' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int blas3[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::collectives
initname __anonymous_0x1524d70::collectives
varname 'collectives'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'collectives' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int collectives[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::Total
initname __anonymous_0x1524d70::Total
varname 'Total'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'Total' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int Total[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::build
initname __anonymous_0x1524d70::build
varname 'build'
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'build' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int build;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::vcycles
initname __anonymous_0x1524d70::vcycles
varname 'vcycles'
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'vcycles' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int vcycles;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x1524d70::MGSolve
initname __anonymous_0x1524d70::MGSolve
varname 'MGSolve'
original vartype 0x2c526b10 'unsigned int'
HACK vartype unsigned int arraypart 
ConvertRoseInitName()  storing variable declaration 'MGSolve' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'unsigned int MGSolve;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting cycles uniquePtr to 0x7fcef29627f0 the SgVariableDeclaration that defined it?
STORING vardecl cycles in global VariableDeclarations 81
ConvertRoseVarDecl() storing variable declaration 'struct {unsigned int smooth[10];unsigned int apply_op[10];unsigned int residual[10];unsigned int restriction[10];unsigned int interpolation[10];unsigned int communication[10];unsigned int pack[10];unsigned int grid2grid[10];unsigned int unpack[10];unsigned int recv[10];unsigned int send[10];unsigned int wait[10];unsigned int blas1[10];unsigned int blas3[10];unsigned int collectives[10];unsigned int Total[10];unsigned int build;unsigned int vcycles;unsigned int MGSolve;}cycles;' with unique value 0x7fcef29627f0 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::vcycles_performed
initname __anonymous_0x15249e0::vcycles_performed
varname 'vcycles_performed'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'vcycles_performed' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int vcycles_performed;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::Krylov_iterations
initname __anonymous_0x15249e0::Krylov_iterations
varname 'Krylov_iterations'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'Krylov_iterations' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int Krylov_iterations;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::CAKrylov_formations_of_G
initname __anonymous_0x15249e0::CAKrylov_formations_of_G
varname 'CAKrylov_formations_of_G'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'CAKrylov_formations_of_G' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int CAKrylov_formations_of_G;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::rank_of_neighbor
initname __anonymous_0x15249e0::rank_of_neighbor
varname 'rank_of_neighbor'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'rank_of_neighbor' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int rank_of_neighbor[27];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::bufferCopies
initname __anonymous_0x15249e0::bufferCopies
varname 'bufferCopies'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526c70 'bufferCopy_type'
HACK vartype bufferCopy_type arraypart 
ConvertRoseInitName()  storing variable declaration 'bufferCopies' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'bufferCopy_type *bufferCopies[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::bufferCopy_Pack_Start
initname __anonymous_0x15249e0::bufferCopy_Pack_Start
varname 'bufferCopy_Pack_Start'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Pack_Start' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int bufferCopy_Pack_Start;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::bufferCopy_Pack_End
initname __anonymous_0x15249e0::bufferCopy_Pack_End
varname 'bufferCopy_Pack_End'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Pack_End' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int bufferCopy_Pack_End;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::bufferCopy_Local_Start
initname __anonymous_0x15249e0::bufferCopy_Local_Start
varname 'bufferCopy_Local_Start'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Local_Start' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int bufferCopy_Local_Start;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::bufferCopy_Local_End
initname __anonymous_0x15249e0::bufferCopy_Local_End
varname 'bufferCopy_Local_End'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Local_End' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int bufferCopy_Local_End;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::bufferCopy_Unpack_Start
initname __anonymous_0x15249e0::bufferCopy_Unpack_Start
varname 'bufferCopy_Unpack_Start'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Unpack_Start' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int bufferCopy_Unpack_Start;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::bufferCopy_Unpack_End
initname __anonymous_0x15249e0::bufferCopy_Unpack_End
varname 'bufferCopy_Unpack_End'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'bufferCopy_Unpack_End' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int bufferCopy_Unpack_End;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::dim
initname __anonymous_0x15249e0::dim
varname 'dim'
original vartype 0x1529e70 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'dim' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x153c490'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153c490::i
initname __anonymous_0x153c490::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153c490::j
initname __anonymous_0x153c490::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153c490::k
initname __anonymous_0x153c490::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting dim uniquePtr to 0x7fcef29659a0 the SgVariableDeclaration that defined it?
STORING vardecl dim in global VariableDeclarations 96
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}dim;' with unique value 0x7fcef29659a0 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::ranks_in
initname __anonymous_0x15249e0::ranks_in
varname 'ranks_in'
original vartype 0x150ba10 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'ranks_in' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x153cf00'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153cf00::i
initname __anonymous_0x153cf00::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153cf00::j
initname __anonymous_0x153cf00::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153cf00::k
initname __anonymous_0x153cf00::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting ranks_in uniquePtr to 0x7fcef29666e0 the SgVariableDeclaration that defined it?
STORING vardecl ranks_in in global VariableDeclarations 100
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}ranks_in;' with unique value 0x7fcef29666e0 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::subdomains_per_rank_in
initname __anonymous_0x15249e0::subdomains_per_rank_in
varname 'subdomains_per_rank_in'
original vartype 0x150c290 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomains_per_rank_in' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x153d990'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153d990::i
initname __anonymous_0x153d990::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153d990::j
initname __anonymous_0x153d990::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153d990::k
initname __anonymous_0x153d990::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting subdomains_per_rank_in uniquePtr to 0x7fcef2967420 the SgVariableDeclaration that defined it?
STORING vardecl subdomains_per_rank_in in global VariableDeclarations 104
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}subdomains_per_rank_in;' with unique value 0x7fcef2967420 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::subdomains_in
initname __anonymous_0x15249e0::subdomains_in
varname 'subdomains_in'
original vartype 0x150cd60 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomains_in' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x153e430'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153e430::i
initname __anonymous_0x153e430::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153e430::j
initname __anonymous_0x153e430::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153e430::k
initname __anonymous_0x153e430::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
we know what the struct definition looks like because it was part of this vardecl
dammit setting subdomains_in uniquePtr to 0x7fcef2968160 the SgVariableDeclaration that defined it?
STORING vardecl subdomains_in in global VariableDeclarations 108
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}subdomains_in;' with unique value 0x7fcef2968160 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::boundary_condition
initname __anonymous_0x15249e0::boundary_condition
varname 'boundary_condition'
original vartype 0x150bc60 'struct {int i;int j;int k;}'
HACK vartype struct {int i;int j;int k;} arraypart 
ConvertRoseInitName()  storing variable declaration 'boundary_condition' with unique value (nil)
in ConvertRoseVarDecl(), there is a defining declaration  (a struct or typedef?)
it's a ClassDeclaration
it's a ClassDeclaration of a struct
ConvertRoseStructDeclaration( CLASSDEC )
struct name is '__anonymous_0x153eec0'

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153eec0::i
initname __anonymous_0x153eec0::i
varname 'i'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153eec0::j
initname __anonymous_0x153eec0::j
varname 'j'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x153eec0::k
initname __anonymous_0x153eec0::k
varname 'k'
original vartype 0x2c526b10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

here is the struct definition:
struct __anonymous_0x153eec0 {
  int i;
  int j;
  int k;
}we know what the struct definition looks like because it was part of this vardecl
dammit setting boundary_condition uniquePtr to 0x7fcef2968ea0 the SgVariableDeclaration that defined it?
STORING vardecl boundary_condition in global VariableDeclarations 112
ConvertRoseVarDecl() storing variable declaration 'struct {int i;int j;int k;}boundary_condition;' with unique value 0x7fcef2968ea0 from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::rank
initname __anonymous_0x15249e0::rank
varname 'rank'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'rank' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int rank;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::subdomains_per_rank
initname __anonymous_0x15249e0::subdomains_per_rank
varname 'subdomains_per_rank'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomains_per_rank' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int subdomains_per_rank;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::numLevels
initname __anonymous_0x15249e0::numLevels
varname 'numLevels'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numLevels' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int numLevels;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::numGrids
initname __anonymous_0x15249e0::numGrids
varname 'numGrids'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int numGrids;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::ghosts
initname __anonymous_0x15249e0::ghosts
varname 'ghosts'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int ghosts;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::h
initname __anonymous_0x15249e0::h
varname 'h'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526c70 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'h' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double h[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::dominant_eigenvalue_of_DinvA
initname __anonymous_0x15249e0::dominant_eigenvalue_of_DinvA
varname 'dominant_eigenvalue_of_DinvA'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526c70 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'dominant_eigenvalue_of_DinvA' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double dominant_eigenvalue_of_DinvA[10];' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::subdomains
initname __anonymous_0x15249e0::subdomains
varname 'subdomains'
original vartype 0x2c526c70 'subdomain_type'
HACK vartype subdomain_type arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomains' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'subdomain_type *subdomains;' with unique value (nil) from  SgInitializedName

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  __anonymous_0x15249e0::vector_ghosts
initname __anonymous_0x15249e0::vector_ghosts
varname 'vector_ghosts'
original vartype 0x2c526c70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'vector_ghosts' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int *vector_ghosts;' with unique value (nil) from  SgInitializedName
now have recorddecl

functiondecl                     create_subdomain blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/mg.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( create_subdomain )


***  ConvertRoseInitName()  box
initname box
varname 'box'
original vartype 0x2c526e60 'subdomain_type'
HACK vartype subdomain_type arraypart 
ConvertRoseInitName()  storing variable declaration 'box' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x1526990  param box)   total of 1 parameters


***  ConvertRoseInitName()  subdomain_low_i
initname subdomain_low_i
varname 'subdomain_low_i'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomain_low_i' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x1526b50  param subdomain_low_i)   total of 2 parameters


***  ConvertRoseInitName()  subdomain_low_j
initname subdomain_low_j
varname 'subdomain_low_j'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomain_low_j' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x1526d30  param subdomain_low_j)   total of 3 parameters


***  ConvertRoseInitName()  subdomain_low_k
initname subdomain_low_k
varname 'subdomain_low_k'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomain_low_k' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x150f450  param subdomain_low_k)   total of 4 parameters


***  ConvertRoseInitName()  subdomain_dim_i
initname subdomain_dim_i
varname 'subdomain_dim_i'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomain_dim_i' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x150f630  param subdomain_dim_i)   total of 5 parameters


***  ConvertRoseInitName()  subdomain_dim_j
initname subdomain_dim_j
varname 'subdomain_dim_j'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomain_dim_j' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x150f810  param subdomain_dim_j)   total of 6 parameters


***  ConvertRoseInitName()  subdomain_dim_k
initname subdomain_dim_k
varname 'subdomain_dim_k'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomain_dim_k' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x150f9f0  param subdomain_dim_k)   total of 7 parameters


***  ConvertRoseInitName()  numGrids
initname numGrids
varname 'numGrids'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x150fbd0  param numGrids)   total of 8 parameters


***  ConvertRoseInitName()  ghosts
initname ghosts
varname 'ghosts'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x1528430  param ghosts)   total of 9 parameters


***  ConvertRoseInitName()  numLevels
initname numLevels
varname 'numLevels'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numLevels' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x15286a0  param numLevels)   total of 10 parameters


***  ConvertRoseInitName()  vec_ghosts
initname vec_ghosts
varname 'vec_ghosts'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'vec_ghosts' with unique value (nil)
new parameter:
create_subdomain chillAST_FunctionDecl::addParameter( 0x15105a0  param vec_ghosts)   total of 11 parameters

functiondecl                     destroy_domain blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/mg.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( destroy_domain )


***  ConvertRoseInitName()  domain
initname domain
varname 'domain'
original vartype 0x2c526e60 'domain_type'
HACK vartype domain_type arraypart 
ConvertRoseInitName()  storing variable declaration 'domain' with unique value (nil)
new parameter:
destroy_domain chillAST_FunctionDecl::addParameter( 0x15109f0  param domain)   total of 1 parameters

functiondecl                     create_domain blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/mg.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( create_domain )


***  ConvertRoseInitName()  domain
initname domain
varname 'domain'
original vartype 0x2c526e60 'domain_type'
HACK vartype domain_type arraypart 
ConvertRoseInitName()  storing variable declaration 'domain' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1510f50  param domain)   total of 1 parameters


***  ConvertRoseInitName()  subdomain_dim_i
initname subdomain_dim_i
varname 'subdomain_dim_i'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomain_dim_i' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1511170  param subdomain_dim_i)   total of 2 parameters


***  ConvertRoseInitName()  subdomain_dim_j
initname subdomain_dim_j
varname 'subdomain_dim_j'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomain_dim_j' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1511350  param subdomain_dim_j)   total of 3 parameters


***  ConvertRoseInitName()  subdomain_dim_k
initname subdomain_dim_k
varname 'subdomain_dim_k'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomain_dim_k' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1511510  param subdomain_dim_k)   total of 4 parameters


***  ConvertRoseInitName()  subdomains_per_rank_in_i
initname subdomains_per_rank_in_i
varname 'subdomains_per_rank_in_i'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomains_per_rank_in_i' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x15116d0  param subdomains_per_rank_in_i)   total of 5 parameters


***  ConvertRoseInitName()  subdomains_per_rank_in_j
initname subdomains_per_rank_in_j
varname 'subdomains_per_rank_in_j'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomains_per_rank_in_j' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1511870  param subdomains_per_rank_in_j)   total of 6 parameters


***  ConvertRoseInitName()  subdomains_per_rank_in_k
initname subdomains_per_rank_in_k
varname 'subdomains_per_rank_in_k'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'subdomains_per_rank_in_k' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1511a10  param subdomains_per_rank_in_k)   total of 7 parameters


***  ConvertRoseInitName()  ranks_in_i
initname ranks_in_i
varname 'ranks_in_i'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ranks_in_i' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1511bd0  param ranks_in_i)   total of 8 parameters


***  ConvertRoseInitName()  ranks_in_j
initname ranks_in_j
varname 'ranks_in_j'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ranks_in_j' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1511db0  param ranks_in_j)   total of 9 parameters


***  ConvertRoseInitName()  ranks_in_k
initname ranks_in_k
varname 'ranks_in_k'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ranks_in_k' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1512020  param ranks_in_k)   total of 10 parameters


***  ConvertRoseInitName()  rank
initname rank
varname 'rank'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'rank' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1512200  param rank)   total of 11 parameters


***  ConvertRoseInitName()  boundary_conditions
initname boundary_conditions
varname 'boundary_conditions'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'boundary_conditions' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1512400  param boundary_conditions)   total of 12 parameters


***  ConvertRoseInitName()  numGrids
initname numGrids
varname 'numGrids'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numGrids' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1512640  param numGrids)   total of 13 parameters


***  ConvertRoseInitName()  ghosts
initname ghosts
varname 'ghosts'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1512820  param ghosts)   total of 14 parameters


***  ConvertRoseInitName()  numLevels
initname numLevels
varname 'numLevels'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'numLevels' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1512a00  param numLevels)   total of 15 parameters


***  ConvertRoseInitName()  vec_ghosts
initname vec_ghosts
varname 'vec_ghosts'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'vec_ghosts' with unique value (nil)
new parameter:
create_domain chillAST_FunctionDecl::addParameter( 0x1512c00  param vec_ghosts)   total of 16 parameters

functiondecl                     MGBuild blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/mg.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( MGBuild )


***  ConvertRoseInitName()  domain
initname domain
varname 'domain'
original vartype 0x2c526e60 'domain_type'
HACK vartype domain_type arraypart 
ConvertRoseInitName()  storing variable declaration 'domain' with unique value (nil)
new parameter:
MGBuild chillAST_FunctionDecl::addParameter( 0x15130e0  param domain)   total of 1 parameters


***  ConvertRoseInitName()  a
initname a
varname 'a'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'a' with unique value (nil)
new parameter:
MGBuild chillAST_FunctionDecl::addParameter( 0x1513300  param a)   total of 2 parameters


***  ConvertRoseInitName()  b
initname b
varname 'b'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'b' with unique value (nil)
new parameter:
MGBuild chillAST_FunctionDecl::addParameter( 0x15134e0  param b)   total of 3 parameters


***  ConvertRoseInitName()  h0
initname h0
varname 'h0'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'h0' with unique value (nil)
new parameter:
MGBuild chillAST_FunctionDecl::addParameter( 0x15136a0  param h0)   total of 4 parameters

functiondecl                     MGSolve blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/mg.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( MGSolve )


***  ConvertRoseInitName()  domain
initname domain
varname 'domain'
original vartype 0x2c526e60 'domain_type'
HACK vartype domain_type arraypart 
ConvertRoseInitName()  storing variable declaration 'domain' with unique value (nil)
new parameter:
MGSolve chillAST_FunctionDecl::addParameter( 0x1513b50  param domain)   total of 1 parameters


***  ConvertRoseInitName()  u_id
initname u_id
varname 'u_id'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'u_id' with unique value (nil)
new parameter:
MGSolve chillAST_FunctionDecl::addParameter( 0x1513d70  param u_id)   total of 2 parameters


***  ConvertRoseInitName()  F_id
initname F_id
varname 'F_id'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'F_id' with unique value (nil)
new parameter:
MGSolve chillAST_FunctionDecl::addParameter( 0x1513f50  param F_id)   total of 3 parameters


***  ConvertRoseInitName()  a
initname a
varname 'a'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'a' with unique value (nil)
new parameter:
MGSolve chillAST_FunctionDecl::addParameter( 0x1514110  param a)   total of 4 parameters


***  ConvertRoseInitName()  b
initname b
varname 'b'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'b' with unique value (nil)
new parameter:
MGSolve chillAST_FunctionDecl::addParameter( 0x15142f0  param b)   total of 5 parameters


***  ConvertRoseInitName()  desired_mg_norm
initname desired_mg_norm
varname 'desired_mg_norm'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'desired_mg_norm' with unique value (nil)
new parameter:
MGSolve chillAST_FunctionDecl::addParameter( 0x15144d0  param desired_mg_norm)   total of 6 parameters

functiondecl                     FMGSolve blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/mg.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( FMGSolve )


***  ConvertRoseInitName()  domain
initname domain
varname 'domain'
original vartype 0x2c526e60 'domain_type'
HACK vartype domain_type arraypart 
ConvertRoseInitName()  storing variable declaration 'domain' with unique value (nil)
new parameter:
FMGSolve chillAST_FunctionDecl::addParameter( 0x1514990  param domain)   total of 1 parameters


***  ConvertRoseInitName()  u_id
initname u_id
varname 'u_id'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'u_id' with unique value (nil)
new parameter:
FMGSolve chillAST_FunctionDecl::addParameter( 0x1514bb0  param u_id)   total of 2 parameters


***  ConvertRoseInitName()  F_id
initname F_id
varname 'F_id'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'F_id' with unique value (nil)
new parameter:
FMGSolve chillAST_FunctionDecl::addParameter( 0x1514d90  param F_id)   total of 3 parameters


***  ConvertRoseInitName()  a
initname a
varname 'a'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'a' with unique value (nil)
new parameter:
FMGSolve chillAST_FunctionDecl::addParameter( 0x1514f50  param a)   total of 4 parameters


***  ConvertRoseInitName()  b
initname b
varname 'b'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'b' with unique value (nil)
new parameter:
FMGSolve chillAST_FunctionDecl::addParameter( 0x1515130  param b)   total of 5 parameters


***  ConvertRoseInitName()  desired_mg_norm
initname desired_mg_norm
varname 'desired_mg_norm'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'desired_mg_norm' with unique value (nil)
new parameter:
FMGSolve chillAST_FunctionDecl::addParameter( 0x1515310  param desired_mg_norm)   total of 6 parameters

functiondecl                     print_timing blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/mg.h
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
NOT THE SAME FILE

ConvertRoseFunctionDecl( print_timing )


***  ConvertRoseInitName()  domain
initname domain
varname 'domain'
original vartype 0x2c526e60 'domain_type'
HACK vartype domain_type arraypart 
ConvertRoseInitName()  storing variable declaration 'domain' with unique value (nil)
new parameter:
print_timing chillAST_FunctionDecl::addParameter( 0x15157f0  param domain)   total of 1 parameters

functiondecl                     smooth_box_1_32 blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c
SAME FILE

ConvertRoseFunctionDecl( smooth_box_1_32 )

hey! comments! on a FunctionDecl
14 preprocessing info

a comment  //#include <stdint.h>

a #define #define uint64_t unsigned int

a #include #include "defines.h"

a #include #include "box.h"

a #include #include "mg.h"

a #define #define SIZE 32

a #define #define GHOSTS 1

a #define #define PR_SIZE 32

a #define #define ALPHA (-128.0/30.0)

a #define #define BETA (14.0/30.0)

a #define #define GAMMA (3.0/30.0)

a #define #define DELTA (1.0/30.0)

a #define #define PENCIL (SIZE + 2 * GHOSTS)

a #define #define PLANE  ( PENCIL * PENCIL )



***  ConvertRoseInitName()  domain
initname domain
varname 'domain'
original vartype 0x2c526e60 'domain_type'
HACK vartype domain_type arraypart 
ConvertRoseInitName()  storing variable declaration 'domain' with unique value (nil)
new parameter:
smooth_box_1_32 chillAST_FunctionDecl::addParameter( 0x1516a60  param domain)   total of 1 parameters


***  ConvertRoseInitName()  level
initname level
varname 'level'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'level' with unique value (nil)
new parameter:
smooth_box_1_32 chillAST_FunctionDecl::addParameter( 0x1516c80  param level)   total of 2 parameters


***  ConvertRoseInitName()  box_id
initname box_id
varname 'box_id'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'box_id' with unique value (nil)
new parameter:
smooth_box_1_32 chillAST_FunctionDecl::addParameter( 0x1516e60  param box_id)   total of 3 parameters


***  ConvertRoseInitName()  phi_id
initname phi_id
varname 'phi_id'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'phi_id' with unique value (nil)
new parameter:
smooth_box_1_32 chillAST_FunctionDecl::addParameter( 0x1517050  param phi_id)   total of 4 parameters


***  ConvertRoseInitName()  rhs_id
initname rhs_id
varname 'rhs_id'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'rhs_id' with unique value (nil)
new parameter:
smooth_box_1_32 chillAST_FunctionDecl::addParameter( 0x1517230  param rhs_id)   total of 5 parameters


***  ConvertRoseInitName()  x
initname x
varname 'x'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'x' with unique value (nil)
new parameter:
smooth_box_1_32 chillAST_FunctionDecl::addParameter( 0x1517410  param x)   total of 6 parameters


***  ConvertRoseInitName()  y
initname y
varname 'y'
original vartype 0x2c526e60 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'y' with unique value (nil)
new parameter:
smooth_box_1_32 chillAST_FunctionDecl::addParameter( 0x15175f0  param y)   total of 7 parameters


***  ConvertRoseInitName()  sweep
initname sweep
varname 'sweep'
original vartype 0x2c526e60 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'sweep' with unique value (nil)
new parameter:
smooth_box_1_32 chillAST_FunctionDecl::addParameter( 0x15177d0  param sweep)   total of 8 parameters
got body
24 statements in FunctionDecl body
chillCS is 0x1517980

statement 0     int i;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  i
initname i
varname 'i'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

statement 1     int j;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  j
initname j
varname 'j'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

statement 2     int k;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  k
initname k
varname 'k'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

statement 3     int ii;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  ii
initname ii
varname 'ii'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ii' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int ii;' with unique value (nil) from  SgInitializedName

statement 4     int jj;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  jj
initname jj
varname 'jj'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'jj' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int jj;' with unique value (nil) from  SgInitializedName

statement 5     int kk;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  kk
initname kk
varname 'kk'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'kk' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int kk;' with unique value (nil) from  SgInitializedName

statement 6     int t;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  t
initname t
varname 't'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 't' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int t;' with unique value (nil) from  SgInitializedName

statement 7     int box;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  box
initname box
varname 'box'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'box' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int box;' with unique value (nil) from  SgInitializedName

statement 8     int s;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  s
initname s
varname 's'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 's' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int s;' with unique value (nil) from  SgInitializedName

statement 9     box = box_id;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement box = box_id;

ConvertRoseBinaryOp()
box = box_id
op is =
LHS is box
RHS is box_id
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 10     s = sweep;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement s = sweep;

ConvertRoseBinaryOp()
s = sweep
op is =
LHS is s
RHS is sweep
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 11     int pencil = domain -> subdomains[box] . levels[level] . pencil;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  pencil
initname pencil
varname 'pencil'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'pencil' with unique value (nil)
pencil gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box] . levels[level]
RHS is pencil
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box]
RHS is levels
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'int pencil = domain -> subdomains[box] . levels[level] . pencil;' with unique value (nil) from  SgInitializedName

statement 12     int plane = domain -> subdomains[box] . levels[level] . plane;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  plane
initname plane
varname 'plane'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'plane' with unique value (nil)
plane gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box] . levels[level]
RHS is plane
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box]
RHS is levels
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'int plane = domain -> subdomains[box] . levels[level] . plane;' with unique value (nil) from  SgInitializedName

statement 13     int ghosts = domain -> subdomains[box] . levels[level] . ghosts;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  ghosts
initname ghosts
varname 'ghosts'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ghosts' with unique value (nil)
ghosts gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box] . levels[level]
RHS is ghosts
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box]
RHS is levels
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'int ghosts = domain -> subdomains[box] . levels[level] . ghosts;' with unique value (nil) from  SgInitializedName

statement 14     int dim_k = domain -> subdomains[box] . levels[level] . dim . k;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  dim_k
initname dim_k
varname 'dim_k'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_k' with unique value (nil)
dim_k gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box] . levels[level] . dim
RHS is k
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box] . levels[level]
RHS is dim
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box]
RHS is levels
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'int dim_k = domain -> subdomains[box] . levels[level] . dim . k;' with unique value (nil) from  SgInitializedName

statement 15     int dim_j = domain -> subdomains[box] . levels[level] . dim . j;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  dim_j
initname dim_j
varname 'dim_j'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_j' with unique value (nil)
dim_j gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box] . levels[level] . dim
RHS is j
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box] . levels[level]
RHS is dim
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box]
RHS is levels
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'int dim_j = domain -> subdomains[box] . levels[level] . dim . j;' with unique value (nil) from  SgInitializedName

statement 16     int dim_i = domain -> subdomains[box] . levels[level] . dim . i;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  dim_i
initname dim_i
varname 'dim_i'
original vartype 0x2c526d40 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'dim_i' with unique value (nil)
dim_i gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box] . levels[level] . dim
RHS is i
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box] . levels[level]
RHS is dim
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgDotExp

ConvertXXXXMemberExp()
op is .
LHS is domain -> subdomains[box]
RHS is levels
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'int dim_i = domain -> subdomains[box] . levels[level] . dim . i;' with unique value (nil) from  SgInitializedName

statement 17     double h2inv = 1.0 /(domain -> h[level] * domain -> h[level]);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  h2inv
initname h2inv
varname 'h2inv'
original vartype 0x2c526d40 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'h2inv' with unique value (nil)
h2inv gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
1.0 /(domain -> h[level] * domain -> h[level])
op is /
LHS is 1.0
RHS is (domain -> h[level] * domain -> h[level])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
(domain -> h[level] * domain -> h[level])
op is *
LHS is domain -> h[level]
RHS is domain -> h[level]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgArrowExp
ConvertRoseMemberExp()  AST Node is 12 SgArrowExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseVarDecl() storing variable declaration 'double h2inv = 1.0 /(domain -> h[level] * domain -> h[level]);' with unique value (nil) from  SgInitializedName

statement 18     double TwoThirds = 2.0 / 3.0;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  TwoThirds
initname TwoThirds
varname 'TwoThirds'
original vartype 0x2c526d40 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'TwoThirds' with unique value (nil)
TwoThirds gets initialized
ConvertRoseGenericAST(),  rose AST node of type SgAssignInitializer
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
2.0 / 3.0
op is /
LHS is 2.0
RHS is 3.0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseVarDecl() storing variable declaration 'double TwoThirds = 2.0 / 3.0;' with unique value (nil) from  SgInitializedName

statement 19     double _in[32 + 2][32 + 2][32 + 2];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _in
initname _in
varname '_in'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526d40 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_in' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double _in[32 + 2][32 + 2][32 + 2];' with unique value (nil) from  SgInitializedName

hey! comments! on a VarDecl
1 preprocessing info


statement 20     double _out[32 + 2][32 + 2][32 + 2];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _out
initname _out
varname '_out'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526d40 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_out' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double _out[32 + 2][32 + 2][32 + 2];' with unique value (nil) from  SgInitializedName

statement 21     double _rhs[32 + 2][32 + 2][32 + 2];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _rhs
initname _rhs
varname '_rhs'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526d40 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_rhs' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double _rhs[32 + 2][32 + 2][32 + 2];' with unique value (nil) from  SgInitializedName

statement 22     double _lambda[32 + 2][32 + 2][32 + 2];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  _lambda
initname _lambda
varname '_lambda'
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 2
op is +
LHS is 32
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x2c526d40 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration '_lambda' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'double _lambda[32 + 2][32 + 2][32 + 2];' with unique value (nil) from  SgInitializedName

statement 23     for(t = 0;t < 1;t++) {if((t + s) % 2 == 0) {for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1]);}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = x * _in[k][j][i] - y * h2inv * _out[k][j][i];}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = _in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i]);}}}}if((t + s) % 2 == 1) {for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1]);}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = x * _out[k][j][i] - y * h2inv * _in[k][j][i];}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = _out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i]);}}}}}
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(t = 0;t < 1;t++) {if((t + s) % 2 == 0) {for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1]);}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = x * _in[k][j][i] - y * h2inv * _out[k][j][i];}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = _in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i]);}}}}if((t + s) % 2 == 1) {for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1]);}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = x * _out[k][j][i] - y * h2inv * _in[k][j][i];}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = _out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i]);}}}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement t = 0;

ConvertRoseBinaryOp()
t = 0
op is =
LHS is t
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
t < 1
op is <
LHS is t
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgIfStmt
if((t + s) % 2 == 0) {for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1]);}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = x * _in[k][j][i] - y * h2inv * _out[k][j][i];}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = _in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i]);}}}}ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement (t + s) % 2 == 0;

ConvertRoseBinaryOp()
(t + s) % 2 == 0
op is ==
LHS is (t + s) % 2
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgModOp

ConvertRoseBinaryOp()
(t + s) % 2
op is %
LHS is (t + s)
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(t + s)
op is +
LHS is t
RHS is s
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1]);}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement k = 0;

ConvertRoseBinaryOp()
k = 0
op is =
LHS is k
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
k < 32 + 1 - 1
op is <
LHS is k
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1]);}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = 0;

ConvertRoseBinaryOp()
j = 0
op is =
LHS is j
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < 32 + 1 - 1
op is <
LHS is j
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1]);}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 32 + 1 - 1
op is <
LHS is i
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _out[k][j][i] = - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1]);

ConvertRoseBinaryOp()
_out[k][j][i] = - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1])
op is =
LHS is _out[k][j][i]
RHS is - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
- 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1]) + 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1])
op is +
LHS is - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1])
RHS is 1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
- 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1]) + 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1])
op is +
LHS is - 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1])
RHS is 3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
- 128.0 / 30.0 * _in[k][j][i] + 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1])
op is +
LHS is - 128.0 / 30.0 * _in[k][j][i]
RHS is 14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
- 128.0 / 30.0 * _in[k][j][i]
op is *
LHS is - 128.0 / 30.0
RHS is _in[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
- 128.0 / 30.0
op is /
LHS is - 128.0
RHS is 30.0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMinusOp
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
14.0 / 30.0 *(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1])
op is *
LHS is 14.0 / 30.0
RHS is (_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
14.0 / 30.0
op is /
LHS is 14.0
RHS is 30.0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1] + _in[k][j][i + 1])
op is +
LHS is _in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1]
RHS is _in[k][j][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i] + _in[k][j][i - 1]
op is +
LHS is _in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i]
RHS is _in[k][j][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i] + _in[k + 1][j][i]
op is +
LHS is _in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i]
RHS is _in[k + 1][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i] + _in[k][j - 1][i] + _in[k][j + 1][i]
op is +
LHS is _in[k - 1][j][i] + _in[k][j - 1][i]
RHS is _in[k][j + 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i] + _in[k][j - 1][i]
op is +
LHS is _in[k - 1][j][i]
RHS is _in[k][j - 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
3.0 / 30.0 *(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1])
op is *
LHS is 3.0 / 30.0
RHS is (_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
3.0 / 30.0
op is /
LHS is 3.0
RHS is 30.0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1] + _in[k + 1][j][i + 1])
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1]
RHS is _in[k + 1][j][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1] + _in[k][j + 1][i + 1]
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1]
RHS is _in[k][j + 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1] + _in[k][j - 1][i + 1]
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1]
RHS is _in[k][j - 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i] + _in[k - 1][j][i + 1]
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i]
RHS is _in[k - 1][j][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i] + _in[k + 1][j + 1][i]
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i]
RHS is _in[k + 1][j + 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i] + _in[k + 1][j - 1][i]
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i]
RHS is _in[k + 1][j - 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i] + _in[k - 1][j + 1][i]
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i]
RHS is _in[k - 1][j + 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1] + _in[k - 1][j - 1][i]
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1]
RHS is _in[k - 1][j - 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1] + _in[k + 1][j][i - 1]
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1]
RHS is _in[k + 1][j][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1] + _in[k][j + 1][i - 1]
op is +
LHS is _in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]
RHS is _in[k][j + 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j][i - 1] + _in[k][j - 1][i - 1]
op is +
LHS is _in[k - 1][j][i - 1]
RHS is _in[k][j - 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
1.0 / 30.0 *(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1])
op is *
LHS is 1.0 / 30.0
RHS is (_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
1.0 / 30.0
op is /
LHS is 1.0
RHS is 30.0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1] + _in[k + 1][j + 1][i + 1])
op is +
LHS is _in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1]
RHS is _in[k + 1][j + 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1] + _in[k + 1][j - 1][i + 1]
op is +
LHS is _in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1]
RHS is _in[k + 1][j - 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1] + _in[k - 1][j + 1][i + 1]
op is +
LHS is _in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1]
RHS is _in[k - 1][j + 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1] + _in[k - 1][j - 1][i + 1]
op is +
LHS is _in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1]
RHS is _in[k - 1][j - 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1] + _in[k + 1][j + 1][i - 1]
op is +
LHS is _in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1]
RHS is _in[k + 1][j + 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1] + _in[k + 1][j - 1][i - 1]
op is +
LHS is _in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]
RHS is _in[k + 1][j - 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_in[k - 1][j - 1][i - 1] + _in[k - 1][j + 1][i - 1]
op is +
LHS is _in[k - 1][j - 1][i - 1]
RHS is _in[k - 1][j + 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = x * _in[k][j][i] - y * h2inv * _out[k][j][i];}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement k = 0;

ConvertRoseBinaryOp()
k = 0
op is =
LHS is k
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
k < 32 + 1 - 1
op is <
LHS is k
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = x * _in[k][j][i] - y * h2inv * _out[k][j][i];}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = 0;

ConvertRoseBinaryOp()
j = 0
op is =
LHS is j
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < 32 + 1 - 1
op is <
LHS is j
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = x * _in[k][j][i] - y * h2inv * _out[k][j][i];}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 32 + 1 - 1
op is <
LHS is i
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _out[k][j][i] = x * _in[k][j][i] - y * h2inv * _out[k][j][i];

ConvertRoseBinaryOp()
_out[k][j][i] = x * _in[k][j][i] - y * h2inv * _out[k][j][i]
op is =
LHS is _out[k][j][i]
RHS is x * _in[k][j][i] - y * h2inv * _out[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
x * _in[k][j][i] - y * h2inv * _out[k][j][i]
op is -
LHS is x * _in[k][j][i]
RHS is y * h2inv * _out[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
x * _in[k][j][i]
op is *
LHS is x
RHS is _in[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
y * h2inv * _out[k][j][i]
op is *
LHS is y * h2inv
RHS is _out[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
y * h2inv
op is *
LHS is y
RHS is h2inv
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = _in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i]);}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement k = 0;

ConvertRoseBinaryOp()
k = 0
op is =
LHS is k
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
k < 32 + 1 - 1
op is <
LHS is k
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = _in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i]);}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = 0;

ConvertRoseBinaryOp()
j = 0
op is =
LHS is j
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < 32 + 1 - 1
op is <
LHS is j
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(i = 0;i < 32 + 1 - 1;i++) {_out[k][j][i] = _in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i]);}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 32 + 1 - 1
op is <
LHS is i
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _out[k][j][i] = _in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i]);

ConvertRoseBinaryOp()
_out[k][j][i] = _in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i])
op is =
LHS is _out[k][j][i]
RHS is _in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
_in[k][j][i] - TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i])
op is -
LHS is _in[k][j][i]
RHS is TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
TwoThirds * _lambda[k][j][i] *(_out[k][j][i] - _rhs[k][j][i])
op is *
LHS is TwoThirds * _lambda[k][j][i]
RHS is (_out[k][j][i] - _rhs[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
TwoThirds * _lambda[k][j][i]
op is *
LHS is TwoThirds
RHS is _lambda[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_out[k][j][i] - _rhs[k][j][i])
op is -
LHS is _out[k][j][i]
RHS is _rhs[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIfStmt
if((t + s) % 2 == 1) {for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1]);}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = x * _out[k][j][i] - y * h2inv * _in[k][j][i];}}}for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = _out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i]);}}}}ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement (t + s) % 2 == 1;

ConvertRoseBinaryOp()
(t + s) % 2 == 1
op is ==
LHS is (t + s) % 2
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgModOp

ConvertRoseBinaryOp()
(t + s) % 2
op is %
LHS is (t + s)
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(t + s)
op is +
LHS is t
RHS is s
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1]);}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement k = 0;

ConvertRoseBinaryOp()
k = 0
op is =
LHS is k
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
k < 32 + 1 - 1
op is <
LHS is k
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1]);}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = 0;

ConvertRoseBinaryOp()
j = 0
op is =
LHS is j
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < 32 + 1 - 1
op is <
LHS is j
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1]);}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 32 + 1 - 1
op is <
LHS is i
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _in[k][j][i] = - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1]);

ConvertRoseBinaryOp()
_in[k][j][i] = - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1])
op is =
LHS is _in[k][j][i]
RHS is - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
- 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1]) + 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1])
op is +
LHS is - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1])
RHS is 1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
- 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1]) + 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1])
op is +
LHS is - 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1])
RHS is 3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
- 128.0 / 30.0 * _out[k][j][i] + 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1])
op is +
LHS is - 128.0 / 30.0 * _out[k][j][i]
RHS is 14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
- 128.0 / 30.0 * _out[k][j][i]
op is *
LHS is - 128.0 / 30.0
RHS is _out[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
- 128.0 / 30.0
op is /
LHS is - 128.0
RHS is 30.0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMinusOp
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
14.0 / 30.0 *(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1])
op is *
LHS is 14.0 / 30.0
RHS is (_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
14.0 / 30.0
op is /
LHS is 14.0
RHS is 30.0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1] + _out[k][j][i + 1])
op is +
LHS is _out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1]
RHS is _out[k][j][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i] + _out[k][j][i - 1]
op is +
LHS is _out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i]
RHS is _out[k][j][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i] + _out[k + 1][j][i]
op is +
LHS is _out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i]
RHS is _out[k + 1][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i] + _out[k][j - 1][i] + _out[k][j + 1][i]
op is +
LHS is _out[k - 1][j][i] + _out[k][j - 1][i]
RHS is _out[k][j + 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i] + _out[k][j - 1][i]
op is +
LHS is _out[k - 1][j][i]
RHS is _out[k][j - 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
3.0 / 30.0 *(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1])
op is *
LHS is 3.0 / 30.0
RHS is (_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
3.0 / 30.0
op is /
LHS is 3.0
RHS is 30.0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1] + _out[k + 1][j][i + 1])
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1]
RHS is _out[k + 1][j][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1] + _out[k][j + 1][i + 1]
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1]
RHS is _out[k][j + 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1] + _out[k][j - 1][i + 1]
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1]
RHS is _out[k][j - 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i] + _out[k - 1][j][i + 1]
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i]
RHS is _out[k - 1][j][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i] + _out[k + 1][j + 1][i]
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i]
RHS is _out[k + 1][j + 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i] + _out[k + 1][j - 1][i]
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i]
RHS is _out[k + 1][j - 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i] + _out[k - 1][j + 1][i]
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i]
RHS is _out[k - 1][j + 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1] + _out[k - 1][j - 1][i]
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1]
RHS is _out[k - 1][j - 1][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1] + _out[k + 1][j][i - 1]
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1]
RHS is _out[k + 1][j][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1] + _out[k][j + 1][i - 1]
op is +
LHS is _out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]
RHS is _out[k][j + 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j][i - 1] + _out[k][j - 1][i - 1]
op is +
LHS is _out[k - 1][j][i - 1]
RHS is _out[k][j - 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
1.0 / 30.0 *(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1])
op is *
LHS is 1.0 / 30.0
RHS is (_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
1.0 / 30.0
op is /
LHS is 1.0
RHS is 30.0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgDoubleVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
(_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1] + _out[k + 1][j + 1][i + 1])
op is +
LHS is _out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1]
RHS is _out[k + 1][j + 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1] + _out[k + 1][j - 1][i + 1]
op is +
LHS is _out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1]
RHS is _out[k + 1][j - 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1] + _out[k - 1][j + 1][i + 1]
op is +
LHS is _out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1]
RHS is _out[k - 1][j + 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1] + _out[k - 1][j - 1][i + 1]
op is +
LHS is _out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1]
RHS is _out[k - 1][j - 1][i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1] + _out[k + 1][j + 1][i - 1]
op is +
LHS is _out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1]
RHS is _out[k + 1][j + 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1] + _out[k + 1][j - 1][i - 1]
op is +
LHS is _out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]
RHS is _out[k + 1][j - 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
_out[k - 1][j - 1][i - 1] + _out[k - 1][j + 1][i - 1]
op is +
LHS is _out[k - 1][j - 1][i - 1]
RHS is _out[k - 1][j + 1][i - 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
i - 1
op is -
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
k - 1
op is -
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
j - 1
op is -
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
j + 1
op is +
LHS is j
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = x * _out[k][j][i] - y * h2inv * _in[k][j][i];}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement k = 0;

ConvertRoseBinaryOp()
k = 0
op is =
LHS is k
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
k < 32 + 1 - 1
op is <
LHS is k
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = x * _out[k][j][i] - y * h2inv * _in[k][j][i];}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = 0;

ConvertRoseBinaryOp()
j = 0
op is =
LHS is j
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < 32 + 1 - 1
op is <
LHS is j
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = x * _out[k][j][i] - y * h2inv * _in[k][j][i];}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 32 + 1 - 1
op is <
LHS is i
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _in[k][j][i] = x * _out[k][j][i] - y * h2inv * _in[k][j][i];

ConvertRoseBinaryOp()
_in[k][j][i] = x * _out[k][j][i] - y * h2inv * _in[k][j][i]
op is =
LHS is _in[k][j][i]
RHS is x * _out[k][j][i] - y * h2inv * _in[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
x * _out[k][j][i] - y * h2inv * _in[k][j][i]
op is -
LHS is x * _out[k][j][i]
RHS is y * h2inv * _in[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
x * _out[k][j][i]
op is *
LHS is x
RHS is _out[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
y * h2inv * _in[k][j][i]
op is *
LHS is y * h2inv
RHS is _in[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
y * h2inv
op is *
LHS is y
RHS is h2inv
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(k = 0;k < 32 + 1 - 1;k++) {for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = _out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i]);}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement k = 0;

ConvertRoseBinaryOp()
k = 0
op is =
LHS is k
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
k < 32 + 1 - 1
op is <
LHS is k
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(j = 0;j < 32 + 1 - 1;j++) {for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = _out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i]);}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = 0;

ConvertRoseBinaryOp()
j = 0
op is =
LHS is j
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < 32 + 1 - 1
op is <
LHS is j
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7fcef6e7d290
for(i = 0;i < 32 + 1 - 1;i++) {_in[k][j][i] = _out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i]);}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 32 + 1 - 1
op is <
LHS is i
RHS is 32 + 1 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
32 + 1 - 1
op is -
LHS is 32 + 1
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
32 + 1
op is +
LHS is 32
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement _in[k][j][i] = _out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i]);

ConvertRoseBinaryOp()
_in[k][j][i] = _out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i])
op is =
LHS is _in[k][j][i]
RHS is _out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
_out[k][j][i] - TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i])
op is -
LHS is _out[k][j][i]
RHS is TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
TwoThirds * _lambda[k][j][i] *(_in[k][j][i] - _rhs[k][j][i])
op is *
LHS is TwoThirds * _lambda[k][j][i]
RHS is (_in[k][j][i] - _rhs[k][j][i])
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
TwoThirds * _lambda[k][j][i]
op is *
LHS is TwoThirds
RHS is _lambda[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
(_in[k][j][i] - _rhs[k][j][i])
op is -
LHS is _in[k][j][i]
RHS is _rhs[k][j][i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
top node 433/439    SgSymbolTable  (IGNORING)
unhandled top node 434/439 of type SgTypeTable
topnode 435 of 439, first == NULL??  blurb numeric_label
top node 436/439    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c  line 0   col 0
top node 437/439    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/jacobi_box_1_32.c  line 0   col 0
unhandled top node 438/439 of type SgSourceFile
(top)node has 15 children
node of type SourceFile is recursing to child 0 of type TypedefDecl
(top)node has 0 children
node of type SourceFile is recursing to child 1 of type FunctionDecl
child 1 is functiondecl destroy_box
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 2 of type FunctionDecl
child 2 is functiondecl create_box
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 3 of type TypedefDecl
(top)node has 0 children
node of type SourceFile is recursing to child 4 of type TypedefDecl
(top)node has 0 children
node of type SourceFile is recursing to child 5 of type TypedefDecl
(top)node has 0 children
node of type SourceFile is recursing to child 6 of type TypedefDecl
(top)node has 0 children
node of type SourceFile is recursing to child 7 of type FunctionDecl
child 7 is functiondecl create_subdomain
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 8 of type FunctionDecl
child 8 is functiondecl destroy_domain
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 9 of type FunctionDecl
child 9 is functiondecl create_domain
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 10 of type FunctionDecl
child 10 is functiondecl MGBuild
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 11 of type FunctionDecl
child 11 is functiondecl MGSolve
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 12 of type FunctionDecl
child 12 is functiondecl FMGSolve
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 13 of type FunctionDecl
child 13 is functiondecl print_timing
(top)node has 1 children
(top)node has 0 children
node of type SourceFile is recursing to child 14 of type FunctionDecl
child 14 is functiondecl smooth_box_1_32

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillCode::MergeNeighboringControlStructures  1 controls
control 0 is IR_CONTROL_LOOP

Loop::Loop(const IR_Control *control)
control type is 3   IR_CONTROL_BLOCK
2set last_compute_cg_ = NULL; 
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillIf::IR_chillIf( ir, chillast_IfStmt )
IR_chillIf::IR_chillIf( ir, chillast_IfStmt )
irtools.cc BACK FROM FindOneLevelControlStructure()  2 controls
controls.size() == 2  (NONZERO)
controls[0] is IR_CONTROL_IF
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  3 controls
controls.size() == 3  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[1] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[2] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 3 parts
controls[1] is IR_CONTROL_IF
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  3 controls
controls.size() == 3  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[1] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[2] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 3 parts
build_ir_tree()  vector result has 2 parts
build_ir_tree()  vector result has 1 parts

                                                  Loop::init_loop()
extract_ir_stmts()
ir_tree has 1 statements
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 2
IR_CONTROL_IF( recursing )
extract_ir_stmts()   ir_tree.size() 3
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_IF( recursing )
extract_ir_stmts()   ir_tree.size() 3
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
nesting level stmt size = 6
6 statements?
i 0
stmt_nesting_level[0] = 4
i 1
stmt_nesting_level[1] = 4
i 2
stmt_nesting_level[2] = 4
i 3
stmt_nesting_level[3] = 4
i 4
stmt_nesting_level[4] = 4
i 5
stmt_nesting_level[5] = 4
in init_loop, made 6 stmts
max nesting level 4 at location 0
loop.cc L356  n_dim now max_nesting_level 4
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 3
making CHILL scalar symbol i
index[3] = 'i'
parent
IR_CONTROL_LOOP  cur_dim 2
making CHILL scalar symbol j
index[2] = 'j'
parent
IR_CONTROL_LOOP  cur_dim 1
making CHILL scalar symbol k
index[1] = 'k'
parent
parent
IR_CONTROL_LOOP  cur_dim 0
making CHILL scalar symbol t
index[0] = 't'
align loops by names,

set relation variable names                      ****
Relation r(4)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_CONTROL_IF
IR_chillCode::QueryExpOperation()
IR_OP_MOD
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym t ) *****

making CHILL scalar symbol t
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[0].loop_level has size n_dim 4
for int i < n_dim(4)
whew
max nesting level 4 at location 1
align loops by names,
making CHILL scalar symbol k
making CHILL scalar symbol j
making CHILL scalar symbol i

set relation variable names                      ****
Relation r(4)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_CONTROL_IF
IR_chillCode::QueryExpOperation()
IR_OP_MOD
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym t ) *****

making CHILL scalar symbol t
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[1].loop_level has size n_dim 4
for int i < n_dim(4)
whew
max nesting level 4 at location 2
align loops by names,
k was already defined in the function body
making CHILL scalar symbol k
j was already defined in the function body
making CHILL scalar symbol j
i was already defined in the function body
making CHILL scalar symbol i

set relation variable names                      ****
Relation r(4)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_CONTROL_IF
IR_chillCode::QueryExpOperation()
IR_OP_MOD
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym t ) *****

making CHILL scalar symbol t
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[2].loop_level has size n_dim 4
for int i < n_dim(4)
whew
max nesting level 4 at location 3
align loops by names,
k was already defined in the function body
making CHILL scalar symbol k
j was already defined in the function body
making CHILL scalar symbol j
i was already defined in the function body
making CHILL scalar symbol i

set relation variable names                      ****
Relation r(4)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_CONTROL_IF
IR_chillCode::QueryExpOperation()
IR_OP_MOD
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym t ) *****

making CHILL scalar symbol t
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[3].loop_level has size n_dim 4
for int i < n_dim(4)
whew
max nesting level 4 at location 4
align loops by names,
k was already defined in the function body
making CHILL scalar symbol k
j was already defined in the function body
making CHILL scalar symbol j
i was already defined in the function body
making CHILL scalar symbol i

set relation variable names                      ****
Relation r(4)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_CONTROL_IF
IR_chillCode::QueryExpOperation()
IR_OP_MOD
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym t ) *****

making CHILL scalar symbol t
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[4].loop_level has size n_dim 4
for int i < n_dim(4)
whew
max nesting level 4 at location 5
align loops by names,
k was already defined in the function body
making CHILL scalar symbol k
j was already defined in the function body
making CHILL scalar symbol j
i was already defined in the function body
making CHILL scalar symbol i

set relation variable names                      ****
Relation r(4)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_CONTROL_IF
IR_chillCode::QueryExpOperation()
IR_OP_MOD
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym t ) *****

making CHILL scalar symbol t
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym s ) *****

making CHILL scalar symbol s
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[5].loop_level has size n_dim 4
for int i < n_dim(4)
whew
                                        loop.cc   Loop::init_loop() END

after init_loop, 1 freevar
loop.cc after init_loop, 6 statements
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 2
k1 0
k1 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 2
k1 0
k1 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 1
k1 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 3
k1 0
k1 1
k1 2
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 1
k1 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 2
k1 0
k1 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 2
k1 0
k1 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 1
k1 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 3
k1 0
k1 1
k1 2
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 1
k1 0


*** LOTS OF REDUCTIONS ***


i range 6
i 0
i 1
dep.hasEdge(1, 1)
tdv size 1
ij 1 0
i 2
dep.hasEdge(2, 2)
tdv size 1
ij 2 0
i 3
i 4
dep.hasEdge(4, 4)
tdv size 1
ij 4 0
i 5
dep.hasEdge(5, 5)
tdv size 1
ij 5 0
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
Loop::setLexicalOrder()  0 idxNames     active size 6  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 6  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 6  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 6  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 6  starting_order 0
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames

loop.cc Loop::printCode(  effort 3 )
Loop::printCode(), last_compute_cg_ == NULL
leaving Loop::printCode()

Loop::stencilASEPadded( stmt_num 3 )   loop_stencil.cc
(ArraySubscriptExpr) forgot to implement gatherDeclRefExpr()
(ArraySubscriptExpr) forgot to implement gatherDeclRefExpr()
(ArraySubscriptExpr) forgot to implement gatherDeclRefExpr()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
(BinaryOperator) forgot to implement gatherScalarVarDecls()
stencil.cc stencil() DONE

found stencil shape

-128 / 3014 / 3014 / 3014 / 3014 / 3014 / 3014 / 303 / 303 / 303 / 303 / 303 / 303 / 303 / 303 / 303 / 303 / 303 / 303 / 301 / 301 / 301 / 301 / 301 / 301 / 301 / 301 / 30stencilInfo::isSymmetric()
3 dimensions
dimension 0   -1 to 1
dimension 1   -1 to 1
dimension 2   -1 to 1


coeff  0  0  0  is -128 / 30


coeff -1  0  0  is 14 / 30
coeff  1  0  0  is 14 / 30


coeff  0 -1  0  is 14 / 30
coeff  0  1  0  is 14 / 30


coeff  0  1  0  is 14 / 30
coeff  0 -1  0  is 14 / 30


coeff  1  0  0  is 14 / 30
coeff -1  0  0  is 14 / 30


coeff  0  0 -1  is 14 / 30
coeff  0  0  1  is 14 / 30


coeff  0  0  1  is 14 / 30
coeff  0  0 -1  is 14 / 30


coeff -1  0 -1  is 3 / 30
coeff  1  0 -1  is 3 / 30
coeff -1  0  1  is 3 / 30


coeff  0 -1 -1  is 3 / 30
coeff  0  1 -1  is 3 / 30
coeff  0 -1  1  is 3 / 30


coeff  0  1 -1  is 3 / 30
coeff  0 -1 -1  is 3 / 30
coeff  0  1  1  is 3 / 30


coeff  1  0 -1  is 3 / 30
coeff -1  0 -1  is 3 / 30
coeff  1  0  1  is 3 / 30


coeff -1 -1  0  is 3 / 30
coeff  1 -1  0  is 3 / 30
coeff -1  1  0  is 3 / 30


coeff -1  1  0  is 3 / 30
coeff  1  1  0  is 3 / 30
coeff -1 -1  0  is 3 / 30


coeff  1 -1  0  is 3 / 30
coeff -1 -1  0  is 3 / 30
coeff  1  1  0  is 3 / 30


coeff  1  1  0  is 3 / 30
coeff -1  1  0  is 3 / 30
coeff  1 -1  0  is 3 / 30


coeff -1  0  1  is 3 / 30
coeff  1  0  1  is 3 / 30
coeff -1  0 -1  is 3 / 30


coeff  0 -1  1  is 3 / 30
coeff  0  1  1  is 3 / 30
coeff  0 -1 -1  is 3 / 30


coeff  0  1  1  is 3 / 30
coeff  0 -1  1  is 3 / 30
coeff  0  1 -1  is 3 / 30


coeff  1  0  1  is 3 / 30
coeff -1  0  1  is 3 / 30
coeff  1  0 -1  is 3 / 30


coeff -1 -1 -1  is 1 / 30
coeff  1 -1 -1  is 1 / 30
coeff -1  1 -1  is 1 / 30
coeff -1 -1  1  is 1 / 30


coeff -1  1 -1  is 1 / 30
coeff  1  1 -1  is 1 / 30
coeff -1 -1 -1  is 1 / 30
coeff -1  1  1  is 1 / 30


coeff  1 -1 -1  is 1 / 30
coeff -1 -1 -1  is 1 / 30
coeff  1  1 -1  is 1 / 30
coeff  1 -1  1  is 1 / 30


coeff  1  1 -1  is 1 / 30
coeff -1  1 -1  is 1 / 30
coeff  1 -1 -1  is 1 / 30
coeff  1  1  1  is 1 / 30


coeff -1 -1  1  is 1 / 30
coeff  1 -1  1  is 1 / 30
coeff -1  1  1  is 1 / 30
coeff -1 -1 -1  is 1 / 30


coeff -1  1  1  is 1 / 30
coeff  1  1  1  is 1 / 30
coeff -1 -1  1  is 1 / 30
coeff -1  1 -1  is 1 / 30


coeff  1 -1  1  is 1 / 30
coeff -1 -1  1  is 1 / 30
coeff  1  1  1  is 1 / 30
coeff  1 -1 -1  is 1 / 30


coeff  1  1  1  is 1 / 30
coeff -1  1  1  is 1 / 30
coeff  1 -1  1  is 1 / 30
coeff  1  1 -1  is 1 / 30
yep, it's symmetric

radius of stencil is 1
chillAST_FunctionDecl::addDecl( buffer_0 )
chillAST_FunctionDecl::addDecl( buffer_1 )
chillAST_FunctionDecl::addDecl( buffer_2 )
Adding temporary registers

3 temp registers
treg_0
chillAST_FunctionDecl::addDecl( treg_0 )
treg_1
chillAST_FunctionDecl::addDecl( treg_1 )
treg_2
chillAST_FunctionDecl::addDecl( treg_2 )
destination array : _in
source array      : _out
dimensions        : 3

Dimension  Variable  MinOffset  MaxOffset  Width
---------  --------  ---------  ---------  -----
    0         k         -1         1         3
    1         j         -1         1         3
    2         i         -1         1         3

    k    j    i   coefficient
 ---- ---- ----   -----------
    0    0    0    (-128 / 30)
   -1    0    0    (14 / 30)
    0   -1    0    (14 / 30)
    0    1    0    (14 / 30)
    1    0    0    (14 / 30)
    0    0   -1    (14 / 30)
    0    0    1    (14 / 30)
   -1    0   -1    (3 / 30)
    0   -1   -1    (3 / 30)
    0    1   -1    (3 / 30)
    1    0   -1    (3 / 30)
   -1   -1    0    (3 / 30)
   -1    1    0    (3 / 30)
    1   -1    0    (3 / 30)
    1    1    0    (3 / 30)
   -1    0    1    (3 / 30)
    0   -1    1    (3 / 30)
    0    1    1    (3 / 30)
    1    0    1    (3 / 30)
   -1   -1   -1    (1 / 30)
   -1    1   -1    (1 / 30)
    1   -1   -1    (1 / 30)
    1    1   -1    (1 / 30)
   -1   -1    1    (1 / 30)
   -1    1    1    (1 / 30)
    1   -1    1    (1 / 30)
    1    1    1    (1 / 30)



IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
k was already defined in the function body
j was already defined in the function body
i was already defined in the function body
i was already defined in the function body
r -1   z 0   y 0

center point
IR_chillArrayRef::IR_chillArrayRef()  write 0
making CHILL scalar symbol treg_0

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_0 ) *****

treg_0 = _out[k][j][i-1]
r -1   z 1   y 0

above center
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
making CHILL scalar symbol treg_1

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_1 ) *****

r -1   z 1   y 1

on diagonal
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
making CHILL scalar symbol treg_2

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_2 ) *****

treg_2 = _out[k][j][i-1] + ...
warmup_pipeline

creating buffer_?[ X ] lines
n -1
z 0   y 0
making CHILL scalar symbol treg_0

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_0 ) *****

z 1   y 0
making CHILL scalar symbol treg_1

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_1 ) *****

z 1   y 1
making CHILL scalar symbol treg_2

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_2 ) *****

IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
r 0   z 0   y 0

center point
IR_chillArrayRef::IR_chillArrayRef()  write 0
making CHILL scalar symbol treg_0

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_0 ) *****

treg_0 = _out[k][j][i]
r 0   z 1   y 0

above center
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
making CHILL scalar symbol treg_1

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_1 ) *****

r 0   z 1   y 1

on diagonal
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
making CHILL scalar symbol treg_2

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_2 ) *****

treg_2 = _out[k][j][i] + ...
warmup_pipeline

creating buffer_?[ X ] lines
n 0
z 0   y 0
making CHILL scalar symbol treg_0

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_0 ) *****

z 1   y 0
making CHILL scalar symbol treg_1

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_1 ) *****

z 1   y 1
making CHILL scalar symbol treg_2

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_2 ) *****

IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
n -1
z 0   y 0
making CHILL scalar symbol treg_0

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_0 ) *****

z 1   y 0
making CHILL scalar symbol treg_1

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_1 ) *****

z 1   y 1
making CHILL scalar symbol treg_2

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_2 ) *****

IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
z 0   y 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
making CHILL scalar symbol treg_0

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_0 ) *****

z 1   y 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
making CHILL scalar symbol treg_1

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_1 ) *****

z 1   y 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
making CHILL scalar symbol treg_2

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_2 ) *****

n 1
z 0   y 0
making CHILL scalar symbol treg_0

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_0 ) *****

z 1   y 0
making CHILL scalar symbol treg_1

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_1 ) *****

z 1   y 1
making CHILL scalar symbol treg_2

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_2 ) *****

IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
n 0
z 0   y 0
making CHILL scalar symbol treg_0

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_0 ) *****

z 1   y 0
making CHILL scalar symbol treg_1

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_1 ) *****

z 1   y 1
making CHILL scalar symbol treg_2

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_2 ) *****

IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
n -1
z 0   y 0
making CHILL scalar symbol treg_0

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_0 ) *****

z 1   y 0
making CHILL scalar symbol treg_1

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_1 ) *****

z 1   y 1
making CHILL scalar symbol treg_2

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym treg_2 ) *****

IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i

loop.cc Loop::printCode(  effort 3 )
Loop::printCode(), last_compute_cg_ == NULL
leaving Loop::printCode()
BIG IF
fail 0
big if true
CUDACHILL IS NOT DEFINED
calling ROSE code gen?    loop num 0 - 0

loop.cc Loop::getCode(  effort 3 )
Loop::getCode() last_compute_cg_ NOT NULL
8 stmts
calling last_compute_cgr_->printRepr()
t2 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t2 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t2 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t2 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t2 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t2 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t2 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t8 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t8 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body
t8 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t8 was already defined in the function body

loop.cc Loop::getCode( effort 3 )   DONE
IR_chillCode::ReplaceCode( old, *repr)
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(IfStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(IfStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(IfStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
printing as part of the destructor
-128
-128
-128
(FunctionDecl) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(IfStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(IfStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
