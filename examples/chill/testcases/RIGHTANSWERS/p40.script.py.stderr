Omega initialized
in C, initchill() to set up C methods to be called from python
ConvertRoseFile(  SgGlobal *sg, filename p40.c );
TOPMOST located node
sourcefile is '/home/derick/dev/chill/chill-src/examples/chill/testcases/p40.c'
426 top nodes

functiondecl                     foo blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/p40.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/p40.c
SAME FILE

ConvertRoseFunctionDecl( foo )

hey! comments! on a FunctionDecl
2 preprocessing info

a #define #define N 16

a #define #define M 20



***  ConvertRoseInitName()  A
initname A
varname 'A'
original vartype 0x23390590 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'A' with unique value (nil)
new parameter:
foo chillAST_FunctionDecl::addParameter( 0x1864920  param A)   total of 1 parameters


***  ConvertRoseInitName()  B
initname B
varname 'B'
original vartype 0x23390590 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'B' with unique value (nil)
new parameter:
foo chillAST_FunctionDecl::addParameter( 0x1863d30  param B)   total of 2 parameters
got body
4 statements in FunctionDecl body
chillCS is 0x1bd8f10

statement 0     int I;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  I
initname I
varname 'I'
original vartype 0x23390470 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'I' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int I;' with unique value (nil) from  SgInitializedName

statement 1     int J;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  J
initname J
varname 'J'
original vartype 0x23390470 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'J' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int J;' with unique value (nil) from  SgInitializedName

statement 2     for(I = 1;I < 16;I++) {for(J = 0;J < 20;J++) {A[I + 2] = A[I] + B[J];}}
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f234732e290
for(I = 1;I < 16;I++) {for(J = 0;J < 20;J++) {A[I + 2] = A[I] + B[J];}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement I = 1;

ConvertRoseBinaryOp()
I = 1
op is =
LHS is I
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
I < 16
op is <
LHS is I
RHS is 16
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f234732e290
for(J = 0;J < 20;J++) {A[I + 2] = A[I] + B[J];}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement J = 0;

ConvertRoseBinaryOp()
J = 0
op is =
LHS is J
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
J < 20
op is <
LHS is J
RHS is 20
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement A[I + 2] = A[I] + B[J];

ConvertRoseBinaryOp()
A[I + 2] = A[I] + B[J]
op is =
LHS is A[I + 2]
RHS is A[I] + B[J]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
I + 2
op is +
LHS is I
RHS is 2
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
A[I] + B[J]
op is +
LHS is A[I]
RHS is B[J]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

hey! comments! on a ForStmt
1 preprocessing info

a comment  // known iteration count


statement 3     return ;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgReturnStmt
ConvertRoseReturnStmt() parent 0x7f234732e290
ConvertRoseGenericAST(),  rose AST node of type SgNullExpression

functiondecl                     main blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/p40.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/p40.c
SAME FILE

ConvertRoseFunctionDecl( main )
got body
4 statements in FunctionDecl body
chillCS is 0x1bd6910

statement 0     float x[16];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  x
initname x
varname 'x'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x23390470 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'x' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'float x[16];' with unique value (nil) from  SgInitializedName

statement 1     float y[20];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  y
initname y
varname 'y'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x23390470 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'y' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'float y[20];' with unique value (nil) from  SgInitializedName

statement 2     foo(x,y);
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement foo(x,y);

ConvertRoseFunctionCallExp()
function  is of type SgFunctionRefExp
(rose) args x,y
symbol->get_definingDeclaration() 0x7f234315d7c8  foo
there are 1 functions to compare to
func  0 unique 0x7f234315d7c8 foo  vs fdecl 0x7f234315d7c8 foo
found it at functiondeclaration 0 of 1
when looking for args, 6 subnodes
subnode 0  'expressions'
subnode 1  'expressions'
subnode 2  'operatorPosition'
subnode 3  'startOfConstruct'
subnode 4  'endOfConstruct'
subnode 5  'parent'
I think function call has up to ? 6 arguments
CONVERTING SUBNODE 0
x
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
CONVERTING SUBNODE 1
y
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
(CallExpr : (DeclRefExpr : foo (VarDecl : "'float ' 'A' '(fake2 : (NULL) ) '" dim 1 ) (VarDecl : "'float ' 'B' '(fake2 : (NULL) ) '" dim 1 ) ) ) 

foo(x, y)


statement 3     return 0;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgReturnStmt
ConvertRoseReturnStmt() parent 0x7f234732e290
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
top node 420/426    SgSymbolTable  (IGNORING)
unhandled top node 421/426 of type SgTypeTable
topnode 422 of 426, first == NULL??  blurb numeric_label
top node 423/426    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/p40.c  line 0   col 0
top node 424/426    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/p40.c  line 0   col 0
unhandled top node 425/426 of type SgSourceFile
(top)node has 2 children
node of type SourceFile is recursing to child 0 of type FunctionDecl
child 0 is functiondecl foo
node of type SourceFile is recursing to child 1 of type FunctionDecl
child 1 is functiondecl main
(top)node has 1 children
(top)node has 4 children
(top)node has 1 children
(top)node has 0 children
(top)node has 1 children
(top)node has 0 children
(top)node has 1 children
(top)node has 0 children
(top)node has 1 children
(top)node has 0 children

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillCode::MergeNeighboringControlStructures  1 controls
control 0 is IR_CONTROL_LOOP

Loop::Loop(const IR_Control *control)
control type is 3   IR_CONTROL_BLOCK
2set last_compute_cg_ = NULL; 
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts

                                                  Loop::init_loop()
extract_ir_stmts()
ir_tree has 1 statements
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
nesting level stmt size = 1
1 statements?
i 0
stmt_nesting_level[0] = 2
in init_loop, made 1 stmts
max nesting level 2 at location 0
loop.cc L356  n_dim now max_nesting_level 2
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 1
making CHILL scalar symbol J
index[1] = 'J'
parent
IR_CONTROL_LOOP  cur_dim 0
making CHILL scalar symbol I
index[0] = 'I'
align loops by names,

set relation variable names                      ****
Relation r(2)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[0].loop_level has size n_dim 2
for int i < n_dim(2)
whew
                                        loop.cc   Loop::init_loop() END

after init_loop, 0 freevar
loop.cc after init_loop, 1 statements
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym I ) *****

making CHILL scalar symbol I
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym I ) *****

making CHILL scalar symbol I
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym I ) *****

making CHILL scalar symbol I
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym I ) *****

making CHILL scalar symbol I
dv.first.size() 2
k1 0
k1 1


*** LOTS OF REDUCTIONS ***


i range 1
i 0
dep.hasEdge(0, 0)
tdv size 2
ij 0 0
ij 0 1
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
BIG IF
fail 0
big if true
CUDACHILL IS NOT DEFINED
calling ROSE code gen?    loop num 0 - 0

loop.cc Loop::getCode(  effort 3 )
Loop::getCode() last_compute_cg_ == NULL
1 stmts
calling last_compute_cgr_->printRepr()
t2 was already defined in the function body
t4 was already defined in the function body
t2 was already defined in the function body
t4 was already defined in the function body

loop.cc Loop::getCode( effort 3 )   DONE
IR_chillCode::ReplaceCode( old, *repr)
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ReturnStmt) uses default gatherVarDecls()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
printing as part of the destructor
(FunctionDecl) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ReturnStmt) forgot to implement gatherVarUsage()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ReturnStmt) uses default gatherVarDecls()
