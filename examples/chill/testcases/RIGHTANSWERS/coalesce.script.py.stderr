Omega initialized
in C, initchill() to set up C methods to be called from python
ConvertRoseFile(  SgGlobal *sg, filename coalesce.c );
TOPMOST located node
sourcefile is '/home/derick/dev/chill/chill-src/examples/chill/testcases/coalesce.c'
425 top nodes

functiondecl                     main blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/coalesce.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/coalesce.c
SAME FILE

ConvertRoseFunctionDecl( main )
got body
11 statements in FunctionDecl body
chillCS is 0x210f910

statement 0     int i;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  i
initname i
varname 'i'
original vartype 0x48d23a50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

statement 1     int j;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  j
initname j
varname 'j'
original vartype 0x48d23a50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

statement 2     int n;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  n
initname n
varname 'n'
original vartype 0x48d23a50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'n' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int n;' with unique value (nil) from  SgInitializedName

statement 3     int x[10];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  x
initname x
varname 'x'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x48d23a50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'x' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int x[10];' with unique value (nil) from  SgInitializedName

statement 4     int y[10];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  y
initname y
varname 'y'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x48d23a50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'y' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int y[10];' with unique value (nil) from  SgInitializedName

statement 5     int a[100];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  a
initname a
varname 'a'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x48d23a50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'a' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int a[100];' with unique value (nil) from  SgInitializedName

statement 6     int index[11];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  index
initname index
varname 'index'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x48d23a50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'index' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int index[11];' with unique value (nil) from  SgInitializedName

statement 7     int col[100];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  col
initname col
varname 'col'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0x48d23a50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'col' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int col[100];' with unique value (nil) from  SgInitializedName

statement 8     n = 10;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement n = 10;

ConvertRoseBinaryOp()
n = 10
op is =
LHS is n
RHS is 10
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal

statement 9     for(i = 0;i < n;i++) for(j = index[i];j < index[i + 1];j++) x[i] += a[j] * y[col[j]];
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f812b549290
for(i = 0;i < n;i++) for(j = index[i];j < index[i + 1];j++) x[i] += a[j] * y[col[j]];
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < n
op is <
LHS is i
RHS is n
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f812b549290
for(j = index[i];j < index[i + 1];j++) x[i] += a[j] * y[col[j]];
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = index[i];

ConvertRoseBinaryOp()
j = index[i]
op is =
LHS is j
RHS is index[i]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < index[i + 1]
op is <
LHS is j
RHS is index[i + 1]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
i + 1
op is +
LHS is i
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement x[i] += a[j] * y[col[j]];

ConvertRoseBinaryOp()
x[i] += a[j] * y[col[j]]
op is +=
LHS is x[i]
RHS is a[j] * y[col[j]]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
a[j] * y[col[j]]
op is *
LHS is a[j]
RHS is y[col[j]]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp

statement 10     return 0;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgReturnStmt
ConvertRoseReturnStmt() parent 0x7f812b549290
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
top node 419/425    SgSymbolTable  (IGNORING)
unhandled top node 420/425 of type SgTypeTable
topnode 421 of 425, first == NULL??  blurb numeric_label
top node 422/425    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/coalesce.c  line 0   col 0
top node 423/425    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/coalesce.c  line 0   col 0
unhandled top node 424/425 of type SgSourceFile
(top)node has 1 children
node of type SourceFile is recursing to child 0 of type FunctionDecl
child 0 is functiondecl main

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillCode::MergeNeighboringControlStructures  1 controls
control 0 is IR_CONTROL_LOOP

Loop::Loop(const IR_Control *control)
control type is 3   IR_CONTROL_BLOCK
2set last_compute_cg_ = NULL; 
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts

                                                  Loop::init_loop()
extract_ir_stmts()
ir_tree has 1 statements
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
nesting level stmt size = 1
1 statements?
i 0
stmt_nesting_level[0] = 2
in init_loop, made 1 stmts
max nesting level 2 at location 0
loop.cc L356  n_dim now max_nesting_level 2
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 1
making CHILL scalar symbol j
index[1] = 'j'
parent
IR_CONTROL_LOOP  cur_dim 0
making CHILL scalar symbol i
index[0] = 'i'
align loops by names,

set relation variable names                      ****
Relation r(2)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
index[i]IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
i was already defined in the function body
ir_rose.cc  *IR_roseCode::CreateDefineMacro( string string repr)
#define index_(i) IR_roseCode::CreateDefineMacro(), CR chillnodes:
index[1 * i]IR_roseCode::CreateDefineMacro(), CR chillnodes DONE
ir_rose.cc  IR_roseCode::CreateDefineMacro() adding macro to sourcefile
ir_rose.cc  *IR_roseCode::CreateDefineMacro( string string repr)
#define index___(i) IR_roseCode::CreateDefineMacro(), CR chillnodes:
index[1 * i + 1]IR_roseCode::CreateDefineMacro(), CR chillnodes DONE
ir_rose.cc  IR_roseCode::CreateDefineMacro() adding macro to sourcefile
IR_chillCode::QueryExpOperation()
index[i + 1]IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
i was already defined in the function body
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
i was already defined in the function body
ir_rose.cc  *IR_roseCode::CreateDefineMacro( string string repr)
#define index__(i) IR_roseCode::CreateDefineMacro(), CR chillnodes:
index[1 * i + 1]IR_roseCode::CreateDefineMacro(), CR chillnodes DONE
ir_rose.cc  IR_roseCode::CreateDefineMacro() adding macro to sourcefile
ir_rose.cc  *IR_roseCode::CreateDefineMacro( string string repr)
#define index____(i) IR_roseCode::CreateDefineMacro(), CR chillnodes:
index[1 * i]IR_roseCode::CreateDefineMacro(), CR chillnodes DONE
ir_rose.cc  IR_roseCode::CreateDefineMacro() adding macro to sourcefile
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
loop.cc lower and upper are both IR_OP_ARRAY_VARIABLE?
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym n ) *****

making CHILL scalar symbol n
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
Loop::addKnown(), SETTING last_compute_cg_ = NULL
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[0].loop_level has size n_dim 2
for int i < n_dim(2)
whew
                                        loop.cc   Loop::init_loop() END

after init_loop, 7 freevar
loop.cc after init_loop, 1 statements
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 2
k1 0
k1 1


*** LOTS OF REDUCTIONS ***


i range 1
i 0
dep.hasEdge(0, 0)
tdv size 2
ij 0 0
ij 0 1
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
Traceback (most recent call last):
  File "coalesce.script.py", line 14, in <module>
    coalesce(0, coalesced_index, [1,2], c)
NameError: name 'coalesced_index' is not defined
BIG IF
fail 0
big if true
CUDACHILL IS NOT DEFINED
calling ROSE code gen?    loop num 0 - 0

loop.cc Loop::getCode(  effort 3 )
Loop::getCode() last_compute_cg_ == NULL
terminate called after throwing an instance of 'omega::codegen_error'
  what():  codegen error: cannot generate code for inexact iteration spaces
Aborted (core dumped)
