Omega initialized
in C, initchill() to set up C methods to be called from python
ConvertRoseFile(  SgGlobal *sg, filename lu.c );
TOPMOST located node
sourcefile is '/home/derick/dev/chill/chill-src/examples/chill/testcases/lu.c'
425 top nodes

functiondecl                     lu blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/lu.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/lu.c
SAME FILE

ConvertRoseFunctionDecl( lu )

hey! comments! on a FunctionDecl
1 preprocessing info

a #define #define N       1024



***  ConvertRoseInitName()  A
initname A
varname 'A'
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
original vartype 0xe9ea4030 'double'
HACK vartype double arraypart 
ConvertRoseInitName()  storing variable declaration 'A' with unique value (nil)
new parameter:
lu chillAST_FunctionDecl::addParameter( 0xf19f80  param A)   total of 1 parameters
got body
4 statements in FunctionDecl body
chillCS is 0xf1d0c0

statement 0     int i;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  i
initname i
varname 'i'
original vartype 0xe9ea3f10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

statement 1     int j;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  j
initname j
varname 'j'
original vartype 0xe9ea3f10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

statement 2     int k;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  k
initname k
varname 'k'
original vartype 0xe9ea3f10 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'k' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int k;' with unique value (nil) from  SgInitializedName

statement 3     for(k = 0;k < 1024 - 1;k++) {for(i = k + 1;i < 1024;i++) {A[k][i] = A[k][i] / A[k][k];}for(i = k + 1;i < 1024;i++) {for(j = k + 1;k < 1024;j++) {A[j][i] = A[j][i] - A[k][i] * A[j][k];}}}
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f550e8b2290
for(k = 0;k < 1024 - 1;k++) {for(i = k + 1;i < 1024;i++) {A[k][i] = A[k][i] / A[k][k];}for(i = k + 1;i < 1024;i++) {for(j = k + 1;k < 1024;j++) {A[j][i] = A[j][i] - A[k][i] * A[j][k];}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement k = 0;

ConvertRoseBinaryOp()
k = 0
op is =
LHS is k
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
k < 1024 - 1
op is <
LHS is k
RHS is 1024 - 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
1024 - 1
op is -
LHS is 1024
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f550e8b2290
for(i = k + 1;i < 1024;i++) {A[k][i] = A[k][i] / A[k][k];}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = k + 1;

ConvertRoseBinaryOp()
i = k + 1
op is =
LHS is i
RHS is k + 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 1024
op is <
LHS is i
RHS is 1024
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement A[k][i] = A[k][i] / A[k][k];

ConvertRoseBinaryOp()
A[k][i] = A[k][i] / A[k][k]
op is =
LHS is A[k][i]
RHS is A[k][i] / A[k][k]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgDivideOp

ConvertRoseBinaryOp()
A[k][i] / A[k][k]
op is /
LHS is A[k][i]
RHS is A[k][k]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f550e8b2290
for(i = k + 1;i < 1024;i++) {for(j = k + 1;k < 1024;j++) {A[j][i] = A[j][i] - A[k][i] * A[j][k];}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = k + 1;

ConvertRoseBinaryOp()
i = k + 1
op is =
LHS is i
RHS is k + 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < 1024
op is <
LHS is i
RHS is 1024
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f550e8b2290
for(j = k + 1;k < 1024;j++) {A[j][i] = A[j][i] - A[k][i] * A[j][k];}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = k + 1;

ConvertRoseBinaryOp()
j = k + 1
op is =
LHS is j
RHS is k + 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgAddOp

ConvertRoseBinaryOp()
k + 1
op is +
LHS is k
RHS is 1
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
k < 1024
op is <
LHS is k
RHS is 1024
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement A[j][i] = A[j][i] - A[k][i] * A[j][k];

ConvertRoseBinaryOp()
A[j][i] = A[j][i] - A[k][i] * A[j][k]
op is =
LHS is A[j][i]
RHS is A[j][i] - A[k][i] * A[j][k]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgSubtractOp

ConvertRoseBinaryOp()
A[j][i] - A[k][i] * A[j][k]
op is -
LHS is A[j][i]
RHS is A[k][i] * A[j][k]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
A[k][i] * A[j][k]
op is *
LHS is A[k][i]
RHS is A[j][k]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
top node 419/425    SgSymbolTable  (IGNORING)
unhandled top node 420/425 of type SgTypeTable
topnode 421 of 425, first == NULL??  blurb numeric_label
top node 422/425    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/lu.c  line 0   col 0
top node 423/425    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/lu.c  line 0   col 0
unhandled top node 424/425 of type SgSourceFile
(top)node has 1 children
node of type SourceFile is recursing to child 0 of type FunctionDecl
child 0 is functiondecl lu

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillCode::MergeNeighboringControlStructures  1 controls
control 0 is IR_CONTROL_LOOP

Loop::Loop(const IR_Control *control)
control type is 3   IR_CONTROL_BLOCK
2set last_compute_cg_ = NULL; 
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  2 controls
controls.size() == 2  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
controls[1] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 2 parts
build_ir_tree()  vector result has 1 parts

                                                  Loop::init_loop()
extract_ir_stmts()
ir_tree has 1 statements
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 2
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
nesting level stmt size = 2
2 statements?
i 0
stmt_nesting_level[0] = 2
i 1
stmt_nesting_level[1] = 3
in init_loop, made 2 stmts
max nesting level 3 at location 1
loop.cc L356  n_dim now max_nesting_level 3
itn = stmt[1]
parent
IR_CONTROL_LOOP  cur_dim 2
making CHILL scalar symbol j
index[2] = 'j'
parent
IR_CONTROL_LOOP  cur_dim 1
making CHILL scalar symbol i
index[1] = 'i'
parent
IR_CONTROL_LOOP  cur_dim 0
making CHILL scalar symbol k
index[0] = 'k'
align loops by names,

set relation variable names                      ****
Relation r(3)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[1].loop_level has size n_dim 3
for int i < n_dim(3)
whew
max nesting level 2 at location 0
align loops by names,
making CHILL scalar symbol i

set relation variable names                      ****
Relation r(3)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[0].loop_level has size n_dim 3
for int i < n_dim(3)
whew
                                        loop.cc   Loop::init_loop() END

after init_loop, 0 freevar
loop.cc after init_loop, 2 statements
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
dv.first.size() 1
k1 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
dv.first.size() 2
k1 0
k1 1
k2 0
k2 1
k2 2
k2 3
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym k ) *****

making CHILL scalar symbol k
dv.first.size() 5
k1 0
k1 1
k1 2
k1 3
k1 4
k2 0


*** LOTS OF REDUCTIONS ***


i range 2
i 0
dep.hasEdge(0, 0)
tdv size 1
ij 0 0
i 1
dep.hasEdge(1, 1)
tdv size 6
ij 1 0
ij 1 1
ij 1 2
ij 1 3
ij 1 4
ij 1 5
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 0
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
loop_tile.cc,  Loop::tile( 7 args )
apply_xform( 1 )
loop.cc apply_xform( set )
loop vars 0 k
loop vars 1 i
loop vars 2 j
2 uninterpreted symbols
loop vars 0 k
loop vars 1 i
loop vars 2 j
loop.cc stmt[*i].code =
loop.cc LEAVING apply_xform( set )

loop_tile.cc  L136 normal tiling
loop.cc apply_xform( set )
loop vars 0 k
loop vars 1 i
loop vars 2 j
2 uninterpreted symbols
loop vars 0 k
loop vars 1 i
loop vars 2 j
loop.cc stmt[*i].code =
loop vars 0 chill_t1
loop vars 1 chill_t2
loop vars 2 chill_t3
chill_t5 was already defined in the function body
chill_t6 was already defined in the function body
chill_t7 was already defined in the function body
2 uninterpreted symbols
loop vars 0 chill_t1
loop vars 1 chill_t2
loop vars 2 chill_t3
loop.cc stmt[*i].code =
loop.cc LEAVING apply_xform( set )

loop_basic.cc L828 adding stmt 2
loop_basic.cc L828 adding stmt 3
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 1
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 1
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 1
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 1
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 2  starting_order 0
terminate called after throwing an instance of 'loop_error'
  what():  Graph input for fusion has cycles not a DAG!!
Aborted (core dumped)
