Omega initialized
in C, initchill() to set up C methods to be called from python
ConvertRoseFile(  SgGlobal *sg, filename permute8910.c );
TOPMOST located node
sourcefile is '/home/derick/dev/chill/chill-src/examples/chill/testcases/permute8910.c'
425 top nodes

functiondecl                     mm blurb declarations
nodefile   /home/derick/dev/chill/chill-src/examples/chill/testcases/permute8910.c
sourcefile /home/derick/dev/chill/chill-src/examples/chill/testcases/permute8910.c
SAME FILE

ConvertRoseFunctionDecl( mm )

hey! comments! on a FunctionDecl
1 preprocessing info

a comment  // a slightly different permute example. Only one statement inside nested loops



***  ConvertRoseInitName()  A
initname A
varname 'A'
original vartype 0xa640ad70 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'A' with unique value (nil)
new parameter:
mm chillAST_FunctionDecl::addParameter( 0x242ecb0  param A)   total of 1 parameters


***  ConvertRoseInitName()  B
initname B
varname 'B'
original vartype 0xa640ad70 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'B' with unique value (nil)
new parameter:
mm chillAST_FunctionDecl::addParameter( 0x23619d0  param B)   total of 2 parameters


***  ConvertRoseInitName()  C
initname C
varname 'C'
original vartype 0xa640ad70 'float'
HACK vartype float arraypart 
ConvertRoseInitName()  storing variable declaration 'C' with unique value (nil)
new parameter:
mm chillAST_FunctionDecl::addParameter( 0x2322a90  param C)   total of 3 parameters


***  ConvertRoseInitName()  ambn
initname ambn
varname 'ambn'
original vartype 0xa640ad70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'ambn' with unique value (nil)
new parameter:
mm chillAST_FunctionDecl::addParameter( 0x25184c0  param ambn)   total of 4 parameters


***  ConvertRoseInitName()  an
initname an
varname 'an'
original vartype 0xa640ad70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'an' with unique value (nil)
new parameter:
mm chillAST_FunctionDecl::addParameter( 0x270af20  param an)   total of 5 parameters


***  ConvertRoseInitName()  bm
initname bm
varname 'bm'
original vartype 0xa640ad70 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'bm' with unique value (nil)
new parameter:
mm chillAST_FunctionDecl::addParameter( 0x270f920  param bm)   total of 6 parameters
got body
5 statements in FunctionDecl body
chillCS is 0x27109f0

statement 0     int i;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  i
initname i
varname 'i'
original vartype 0xa640ac50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'i' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int i;' with unique value (nil) from  SgInitializedName

statement 1     int j;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  j
initname j
varname 'j'
original vartype 0xa640ac50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'j' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int j;' with unique value (nil) from  SgInitializedName

statement 2     int n;
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgVariableDeclaration

ConvertRoseVarDecl() 
defdecl (nil)


***  ConvertRoseInitName()  n
initname n
varname 'n'
original vartype 0xa640ac50 'int'
HACK vartype int arraypart 
ConvertRoseInitName()  storing variable declaration 'n' with unique value (nil)
ConvertRoseVarDecl() storing variable declaration 'int n;' with unique value (nil) from  SgInitializedName

statement 3     for(i = 0;i < an;i++) {for(j = 0;j < bm;j++) {C[i][j] = 0.0f;}}
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f9716db2290
for(i = 0;i < an;i++) {for(j = 0;j < bm;j++) {C[i][j] = 0.0f;}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < an
op is <
LHS is i
RHS is an
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f9716db2290
for(j = 0;j < bm;j++) {C[i][j] = 0.0f;}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = 0;

ConvertRoseBinaryOp()
j = 0
op is =
LHS is j
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < bm
op is <
LHS is j
RHS is bm
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement C[i][j] = 0.0f;

ConvertRoseBinaryOp()
C[i][j] = 0.0f
op is =
LHS is C[i][j]
RHS is 0.0f
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgFloatVal

statement 4     for(i = 0;i < an;i++) {for(j = 0;j < bm;j++) {for(n = 0;n < ambn;n++) {C[i][j] += A[i][n] * B[n][j];}}}
calling ConvertRoseGenericAST
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f9716db2290
for(i = 0;i < an;i++) {for(j = 0;j < bm;j++) {for(n = 0;n < ambn;n++) {C[i][j] += A[i][n] * B[n][j];}}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement i = 0;

ConvertRoseBinaryOp()
i = 0
op is =
LHS is i
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
i < an
op is <
LHS is i
RHS is an
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f9716db2290
for(j = 0;j < bm;j++) {for(n = 0;n < ambn;n++) {C[i][j] += A[i][n] * B[n][j];}}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement j = 0;

ConvertRoseBinaryOp()
j = 0
op is =
LHS is j
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
j < bm
op is <
LHS is j
RHS is bm
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgForStatement

ConvertRoseForStatement()  parent 0x7f9716db2290
for(n = 0;n < ambn;n++) {C[i][j] += A[i][n] * B[n][j];}
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement n = 0;

ConvertRoseBinaryOp()
n = 0
op is =
LHS is n
RHS is 0
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgIntVal
ConvertRoseGenericAST(),  rose AST node of type SgLessThanOp

ConvertRoseBinaryOp()
n < ambn
op is <
LHS is n
RHS is ambn
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPlusPlusOp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgBasicBlock
ConvertRoseGenericAST(),  rose AST node of type SgExprStatement
ConvertRoseExprStatement() exprstatement C[i][j] += A[i][n] * B[n][j];

ConvertRoseBinaryOp()
C[i][j] += A[i][n] * B[n][j]
op is +=
LHS is C[i][j]
RHS is A[i][n] * B[n][j]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgMultiplyOp

ConvertRoseBinaryOp()
A[i][n] * B[n][j]
op is *
LHS is A[i][n]
RHS is B[n][j]
ir_rose.cc L1357, making a binop with no LHS no RHS but a parent
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgPntrArrRefExp
ConvertRoseArrayRefExp()
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
ConvertRoseGenericAST(),  rose AST node of type SgVarRefExp
top node 419/425    SgSymbolTable  (IGNORING)
unhandled top node 420/425 of type SgTypeTable
topnode 421 of 425, first == NULL??  blurb numeric_label
top node 422/425    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/permute8910.c  line 0   col 0
top node 423/425    Sg_File_Info
file /home/derick/dev/chill/chill-src/examples/chill/testcases/permute8910.c  line 0   col 0
unhandled top node 424/425 of type SgSourceFile
(top)node has 1 children
node of type SourceFile is recursing to child 0 of type FunctionDecl
child 0 is functiondecl mm

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
IR_chillCode::MergeNeighboringControlStructures  1 controls
control 0 is IR_CONTROL_LOOP

Loop::Loop(const IR_Control *control)
control type is 3   IR_CONTROL_BLOCK
2set last_compute_cg_ = NULL; 
in Loop::Loop, calling  build_ir_tree()

loop.cc, Loop::Loop() about to clone control
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_LOOP
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  1 controls
controls.size() == 1  (NONZERO)
controls[0] is IR_CONTROL_BLOCK
irtools.cc, build_ir_tree( control, parent)   building a CHILL IR tree 
irtools.cc L31   case IR_CONTROL_BLOCK

IR_chillCode::FindOneLevelControlStructure() yep CHILLcode
irtools.cc BACK FROM FindOneLevelControlStructure()  0 controls
controls.size() == 0
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts
build_ir_tree()  vector result has 1 parts

                                                  Loop::init_loop()
extract_ir_stmts()
ir_tree has 1 statements
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_LOOP( recursing )
extract_ir_stmts()   ir_tree.size() 1
IR_CONTROL_BLOCK
nesting level stmt size = 1
1 statements?
i 0
stmt_nesting_level[0] = 3
in init_loop, made 1 stmts
max nesting level 3 at location 0
loop.cc L356  n_dim now max_nesting_level 3
itn = stmt[0]
parent
IR_CONTROL_LOOP  cur_dim 2
making CHILL scalar symbol n
index[2] = 'n'
parent
IR_CONTROL_LOOP  cur_dim 1
making CHILL scalar symbol j
index[1] = 'j'
parent
IR_CONTROL_LOOP  cur_dim 0
making CHILL scalar symbol i
index[0] = 'i'
align loops by names,

set relation variable names                      ****
Relation r(3)
extract information from loop/if structures
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym ambn ) *****

making CHILL scalar symbol ambn
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym bm ) *****

making CHILL scalar symbol bm
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc l 462  IR_CONTROL_LOOP
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym an ) *****

making CHILL scalar symbol an
IR_chillCode::QueryExpOperation()
ir_rose.cc  return IR_OP_CONSTANT
loop.cc L441 insert the statement
loop.cc before extract
loop.cc stmt[0].loop_level has size n_dim 3
for int i < n_dim(3)
whew
                                        loop.cc   Loop::init_loop() END

after init_loop, 3 freevar
loop.cc after init_loop, 1 statements
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 1
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillArrayRef::IR_chillArrayRef()  write 0
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym i ) *****

making CHILL scalar symbol i
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
IR_chillCode::QueryExpOperation()

*****                         new IR_xxxxScalarRef( ir, REF EXPR sym j ) *****

making CHILL scalar symbol j
dv.first.size() 2
k1 0
k1 1


*** LOTS OF REDUCTIONS ***


i range 1
i 0
dep.hasEdge(0, 0)
tdv size 2
ij 0 0
ij 0 1
loop.cc reducCand.size() 0
loop.cc canReduce.size() 0
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::addKnown(), SETTING last_compute_cg_ = NULL
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
Loop:setLexicalOrder() recursing
Loop::setLexicalOrder()  0 idxNames     active size 1  starting_order 0
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
LEAVING Loop::setLexicalOrder()  0 idxNames
BIG IF
fail 0
big if true
CUDACHILL IS NOT DEFINED
calling ROSE code gen?    loop num 1 - 1

loop.cc Loop::getCode(  effort 3 )
Loop::getCode() last_compute_cg_ == NULL
1 stmts
calling last_compute_cgr_->printRepr()
t2 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t4 was already defined in the function body
t6 was already defined in the function body
t2 was already defined in the function body

loop.cc Loop::getCode( effort 3 )   DONE
IR_chillCode::ReplaceCode( old, *repr)
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
printing as part of the destructor
(FunctionDecl) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(UnaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(ForStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(CompoundStmt) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(BinaryOperator) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(ArraySubscriptExpr) forgot to implement gatherVarUsage()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(UnaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(ForStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(CompoundStmt) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(BinaryOperator) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
(ArraySubscriptExpr) uses default gatherVarDecls()
